package gov.nih.mipav.model.algorithms;

import gov.nih.mipav.util.MipavCoordinateSystems;
import gov.nih.mipav.model.file.FileInfoBase;
import gov.nih.mipav.model.file.FileInfoBase.Unit;
import gov.nih.mipav.model.structures.ModelImage;
import gov.nih.mipav.model.structures.VOI;
import gov.nih.mipav.model.structures.VOIBase;
import gov.nih.mipav.model.structures.VOIContour;
import gov.nih.mipav.model.structures.VOIStatisticList;
import gov.nih.mipav.model.structures.VOIStatisticalProperties;
import gov.nih.mipav.view.MipavUtil;
import gov.nih.mipav.view.Preferences;
import gov.nih.mipav.view.ViewVOIVector;
import gov.nih.mipav.view.dialogs.JPanelPixelExclusionSelector.RangeType;

import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Vector;

import javax.swing.ListModel;

import WildMagic.LibFoundation.Mathematics.ColorRGB;
import WildMagic.LibFoundation.Mathematics.Vector3f;


/**
 * This class calculates a properties of an image defined by a VOI. Attributes include: volume, area, number of pixels,
 * center of mass, average pixel intensity, standard deviation of intensity, eccentricity, principalAxis,
 * coefficient of skewness, and coefficient of kurtosis.
 *
 * @version  0.1 Feb 11, 1998
 * @author   Matthew J. McAuliffe, Ph.D.
 *
 * Calculates and prepares for display image statistics generated on closed VOI Contours.  
 * The contours can  exist on any of the three orthogonal image slices.  
 * The user can select to display the contour statistics sorted by contour, contour and slice, 
 * slice (contours are summed over a slice), or by a total sum.  
 * Depending on the type of output selected by the user the contours are displayed with the following information tags:
 * 
 * By contour : Name, ID
 * By contour & slice: Name, orientation, slice, ID
 * By slice only: Name, orientation; slice
 * By total VOI: Name
 * 
 * Most of the statistics are generated by iterating through the set of voxels that are contained within 
 * the closed contour. These statistic calculations take advantage of the information that is generated 
 * with the VOIBase.getMask() function and stored inside the VOIBase class. Because the information is 
 * generated once at the start of the calculation and stored, the performance for all statistic calculations is improved.
 * 
 * When the VOIBase.getMask() function is called the following information is stored in the VOIBase class: 
 * BitSet mask of voxels inside the closed contour
 * Vector<Vector3f> list of voxel positions inside the closed contour
 * Geometric Center of the contour.
 * 
 * The following statistics can be derived directly from the stored information:
 * -- number of voxels
 * -- area
 * -- volume
 * -- min, max, sum, average intensity
 * -- median, mode, mode count
 * -- standard deviation, coefficient of skewness, coefficient of kurtosis, center of mass
 * -- geometric center
 * 
 * When the AlgorithmVOIProps is instantiated from a dialog, the user is able to select the 
 * statistics to calculate. The list of selected statistics is passed to the AlgorithmVOIProps 
 * and  only the statistics requested by the user are calculated. When AlgorithmVOIProps is 
 * accessed through another algorithm, all statistics are automatically calculated.
 * 
 * Median statistics (median, mode, mode count) are calculated in a function that takes the 
 * list of voxels as input, can be used on a single contour or on a group of contours.
 * 
 * Standard deviation statistics are calculated in a function that takes the list of voxel positions, 
 * can be used on a single contour or on a group of contours.
 */
public class AlgorithmVOIProps extends AlgorithmBase implements VOIStatisticList {

    //~ Static fields/initializers -------------------------------------------------------------------------------------
    // parameters for findPositionAndCurvature
    private boolean smoothCurvature = true;
    private double negativeHysteresisFraction = 0.25;
    private double positiveHysteresisFraction = 0.25;
    private int consecutiveNegativeNeeded = 2;
    private double negativeCurvatureNeeded = 0.0;
    
    public void setSmoothCurvature(boolean smoothCurvature) {
        this.smoothCurvature = smoothCurvature;    
    }
    
    public void setNegativeHysteresisFraction(double negativeHysteresisFraction) {
        this.negativeHysteresisFraction = negativeHysteresisFraction;
    }
    
    public void setPositiveHysteresisFraction(double positiveHysteresisFraction) {
        this.positiveHysteresisFraction = positiveHysteresisFraction;
    }
    
    public void setConsecutiveNegativeNeeded(int consecutiveNegativeNeeded) {
        this.consecutiveNegativeNeeded = consecutiveNegativeNeeded;
    }
    
    public void setNegativeCurvatureNeeded(double negativeCurvatureNeeded) {
        this.negativeCurvatureNeeded = negativeCurvatureNeeded;
    }

    private class Calc34D implements Runnable {

        /**
         * Stores the statistics for a single contour, color or grayscale. 
         * Can also be used to store the summed statistics for a group of contours.
         */
        private class ContourStats
        {
            public double area;
            public double hullArea;
            public double volume;
            public double perimeter;
            public double circularity;
            public double solidity;
            public int numberOfIndentationsCurvature;
            public int numberOfIndentationsHull;
            public double asymmetryIndex;
            public double fractalDimensionBoxCount;
            public double fractalDimensionEuclideanDistance;
            public double meanCurvature;
            public double stdDevCurvature;
            public double meanNegativeCurvature;
            public double largestContourDistance;
            @SuppressWarnings("unused")
            public double[] xMass, yMass, zMass;

            @SuppressWarnings("unused")
            public double[] massI;
            Vector<Float> values;

            Vector<ColorRGB> valuesRGB;
            public double PAxis, Ecc, MajorAxis, MinorAxis;            

            public String gCenterString;
            public String massCenterDescriptionR;
            public String massCenterDescriptionG;
            public String massCenterDescriptionB;
            public String massCenterDescription;
            public double minIntenRed;

            public double maxIntenRed;
            public double minIntenGreen;
            public double maxIntenGreen;
            public double minIntenBlue;
            public double maxIntenBlue;
            public double avgIntenR;
            public double avgIntenG;
            public double avgIntenB;
            public double nVox;
            public double sumR;
            public double sumG;
            public double sumB;
            public double medianR;
            public double medianG;
            public double medianB;
            public double modeR;
            public double modeG;
            public double modeB;
            public double maxCountR;
            public double maxCountG;
            public double maxCountB;
            public double minIntensity;

            public double maxIntensity;
            public double avgInten;
            public double sum;
            public double median;
            public double mode;
            public double maxCount;
            public double stdDevR;
            public double stdDevG;
            public double stdDevB;
            public double skewnessR;
            public double skewnessG;
            public double skewnessB;
            public double kurtosisR;
            public double kurtosisG;
            public double kurtosisB;
            public double stdDev;
            public double skewness;
            public double kurtosis;
            public Vector<Vector3f> maskPositions;
            public ContourStats() {}
        }

        /** The VOI being used just for this calculation (may be a single curve of a single slice or entire VOI **/
        private VOI calcSelectedVOI;

        public Calc34D(VOI selectedVOI) {
            this.calcSelectedVOI = selectedVOI;
        }


        /**
         * Calculates the median statistics for a grayscale image. The image data is stored in the input stats.values. This
         * function can be used for a single contour or a group of contours.
         * @param stats contains the Vector<Float> of voxels inside the contour(s) used to calculate the median, mode and mode count.
         * @return median, mode and mode count for the input values are written into stats.
         */
        public void getMedianStatistics( ContourStats stats )
        {
        	int j;
        	float temp;
            int nVox = stats.values.size();
            int nVoxValid = 0;
            for (int i = 0; i < nVox; i++) {
            	temp = stats.values.elementAt(i).floatValue();
                if (!Float.isNaN(temp)) {
                	nVoxValid++;
                }
            }
            float[] buff = new float[nVoxValid];
            j = 0;
            for ( int i = 0; i < nVox; i++ )
            {
            	temp = stats.values.elementAt(i).floatValue();
            	if (!Float.isNaN(temp)) {
                    buff[j++] = temp;
            	}
            }

            Arrays.sort(buff);
            float[] sorted = buff;
            int cnt = sorted.length;
            double median;
            temp = 0;
            int count = 0;
            float mode = 0;
            float maxCount = 0;
            for(int i=0;i<sorted.length;i++) {
                if(i==0) {
                    temp = sorted[i];
                    count = 1;
                    mode = temp;
                    maxCount = 1;
                }else {
                    if(sorted[i] == temp) {
                        count++;
                        if(count > maxCount) {
                            maxCount = count;
                            mode = temp;
                        }

                    }else {
                        temp = sorted[i];
                        count = 1;
                    }
                } 
            }
            if (cnt%2 == 1) {
                median = sorted[cnt/2] ;   
            } else if (cnt == 0) { 
                median = 0;
            } else {
                median = (sorted[cnt/2] + sorted[(cnt/2) - 1])/2.0;
            }
            stats.median = median;
            stats.mode = mode;
            stats.maxCount = maxCount;
        }

        /**
         * Calculates the median statistics for a color image. The image data is stored in the input stats.valuesRGB. This
         * function can be used for a single contour or a group of contours.
         * @param stats contains the Vector<ColorRGB> of voxels inside the contour(s) used to calculate the median, mode and mode count.
         * @return median, mode and mode count for the RGB values are written into stats.
         */
        public void getMedianStatisticsRGB( ContourStats stats )
        {
        	int j;
        	float tempR;
        	float tempG;
        	float tempB;
            int nVox = stats.valuesRGB.size();
            int nVoxValid = 0;
            for (int i = 0; i < nVox; i++) {
            	tempR = stats.valuesRGB.elementAt(i).R;
            	tempG = stats.valuesRGB.elementAt(i).G;
            	tempB = stats.valuesRGB.elementAt(i).B;
                if ((!Float.isNaN(tempR)) && (!Float.isNaN(tempG)) &&
                	(!Float.isNaN(tempG))) {
                	nVoxValid++;
                }
            }
            float[] buffR = new float[nVoxValid];
            float[] buffG = new float[nVoxValid];
            float[] buffB = new float[nVoxValid];
            j = 0;
            for ( int i = 0; i < nVox; i++ )
            {
            	tempR = stats.valuesRGB.elementAt(i).R;
            	tempG = stats.valuesRGB.elementAt(i).G;
            	tempB = stats.valuesRGB.elementAt(i).B;
            	if ((!Float.isNaN(tempR)) && (!Float.isNaN(tempG)) &&
                    	(!Float.isNaN(tempG))) {
                buffR[j] = tempR;
                buffG[j] = tempG;
                buffB[j++] = tempB;
            	}
            }

            //red
            Arrays.sort(buffR);
            float[] sortedR = buffR;

            int cntR = sortedR.length;
            double medianR;
            tempR = 0;
            int countR = 0;
            float modeR = 0;
            float maxCountR = 0;
            for(int i=0;i<sortedR.length;i++) {
                if(i==0) {
                    tempR = sortedR[i];
                    countR = 1;
                    modeR = tempR;
                    maxCountR = 1;
                }else {
                    if(sortedR[i] == tempR) {
                        countR++;
                        if(countR > maxCountR) {
                            maxCountR = countR;
                            modeR = tempR;
                        }

                    }else {
                        tempR = sortedR[i];
                        countR = 1;
                    }
                } 
            }
            if (cntR%2 == 1) {
                medianR = sortedR[cntR/2] ;   
            }
            else {
                medianR = (sortedR[cntR/2] + sortedR[(cntR/2) - 1])/2.0;
            }


            //green
            Arrays.sort(buffG);
            float[] sortedG = buffG;
            int cntG = sortedG.length;
            double medianG;
            tempG = 0;
            int countG = 0;
            float modeG = 0;
            float maxCountG = 0;
            for(int i=0;i<sortedG.length;i++) {
                if(i==0) {
                    tempG = sortedG[i];
                    countG = 1;
                    modeG = tempG;
                    maxCountG = 1;
                }else {
                    if(sortedG[i] == tempG) {
                        countG++;
                        if(countG > maxCountG) {
                            maxCountG = countG;
                            modeG = tempG;
                        }

                    }else {
                        tempG = sortedG[i];
                        countG = 1;
                    }
                } 
            }
            if (cntG%2 == 1) {
                medianG = sortedG[cntG/2] ;   
            }
            else {
                medianG = (sortedG[cntG/2] + sortedG[(cntG/2) - 1])/2.0;
            }


            //blue
            Arrays.sort(buffB);
            float[] sortedB = buffB;
            int cntB = sortedB.length;
            double medianB;
            tempB = 0;
            int countB = 0;
            float modeB = 0;
            float maxCountB = 0;
            for(int i=0;i<sortedB.length;i++) {
                if(i==0) {
                    tempB = sortedB[i];
                    countB = 1;
                    modeB = tempB;
                    maxCountB = 1;
                }else {
                    if(sortedB[i] == tempB) {
                        countB++;
                        if(countB > maxCountB) {
                            maxCountB = countB;
                            modeB = tempB;
                        }

                    }else {
                        tempB = sortedB[i];
                        countB = 1;
                    }
                } 
            }
            if (cntB%2 == 1) {
                medianB = sortedB[cntB/2] ;   
            }
            else {
                medianB = (sortedB[cntB/2] + sortedB[(cntB/2) - 1])/2.0;
            }
            stats.medianR = medianR;
            stats.medianG = medianG;
            stats.medianB = medianB;

            stats.modeR = modeR;
            stats.modeG = modeG;
            stats.modeB = modeB;

            stats.maxCountR = maxCountR;
            stats.maxCountG = maxCountG;
            stats.maxCountB = maxCountB;
        }

        /**
         * Calculates the standard deviation, coefficient of skewness, coefficient of kurtosis and center of mass
         * for a grayscale image.
         * @param stats output values are written into stats.
         * @param kPositions list of positions of voxels inside the contour (or multiple contours).
         * @param unit2DStr, 2D label string
         * @param unit3DStr, 3D label string
         * @param ignoreMin, threshold minimum
         * @param ignoreMax, threshold maximum
         */
        public void getStdSkewStatistics( ContourStats stats, Vector<Vector3f> kPositions,
                String unit2DStr, String unit3DStr, float ignoreMin, float ignoreMax )
        {

            double sum2 = 0;
            double sum3 = 0;
            double sum4 = 0;
            // Calculate centers of mass
            double xMass = 0, yMass = 0, zMass = 0;

            int cnt = 0;

            double diff;
            double s2, s3, s4;
            for ( int i = 0; i < kPositions.size(); i++ )
            {
                Vector3f kPos = kPositions.elementAt(i);
                int x = (int)kPos.X;
                int y = (int)kPos.Y;
                int z = (int)kPos.Z;

                float fVal = srcImage.getFloat(x,y,z);

                if ((!MipavUtil.inRange(ignoreMin, ignoreMax, fVal, rangeFlag)) && (!Float.isNaN(fVal))) {
                    xMass += x * fVal;
                    yMass += y * fVal;
                    zMass += z * fVal;
                    diff = fVal - stats.avgInten;
                    s2 = diff * diff;
                    sum2 += s2;
                    s3 = s2 * diff;
                    sum3 += s3;
                    s4 = s3 * diff;
                    sum4 += s4;
                    cnt++;
                }
            }
            double stdDev = (float) Math.sqrt(sum2 / (cnt-1));
            stats.stdDev = stdDev;
            double moment2 = sum2/cnt;
            double moment3 = sum3/cnt;
            double moment4 = sum4/cnt;
            double skewness = (float)(moment3/Math.pow(moment2, 1.5));
            stats.skewness = skewness;
            double kurtosis = moment4/(moment2 * moment2);
            stats.kurtosis = kurtosis;
            // Center of mass
            double xCOM = xMass * srcImage.getFileInfo(0).getResolutions()[0]/stats.sum;
            double yCOM = yMass * srcImage.getFileInfo(0).getResolutions()[1]/stats.sum;
            double zCOM = zMass/stats.sum;
            String unitStr = unit2DStr + "\tZ";
            if (srcImage.getNDims() > 2) {
                zCOM *= srcImage.getFileInfo(0).getResolutions()[2];
                unitStr = unit3DStr;
            }

            String comStr = unitStr + "\n\t\t" + nf.format(xCOM) + "\t" + nf.format(yCOM) + "\t" +
            nf.format(zCOM);
            Vector3f centerPt = new Vector3f();
            centerPt.X = (float)xCOM;
            centerPt.Y = (float)yCOM;
            centerPt.Z = (float)zCOM;
            comStr = addScannerLabels(comStr, centerPt);
            stats.massCenterDescription = new String(comStr);

            stats.massI = new double[]{ xMass, yMass, zMass };
        }

        /**
         * Calculates the standard deviation, coefficient of skewness, coefficient of kurtosis and center of mass
         * for a color image.
         * @param stats output values are written into stats.
         * @param kPositions list of positions of voxels inside the contour (or multiple contours).
         * @param unit2DStr, 2D label string
         * @param unit3DStr, 3D label string
         * @param ignoreMinR, threshold minimum red
         * @param ignoreMaxR, threshold maximum red
         * @param ignoreMinG, threshold minimum green
         * @param ignoreMaxG, threshold maximum green
         * @param ignoreMinB, threshold minimum blue
         * @param ignoreMaxB, threshold maximum blue
         */
        public void getStdSkewStatisticsRGB( ContourStats stats, Vector<Vector3f> kPositions, 
                String unit2DStr, String unit3DStr, float ignoreMinR, float ignoreMaxR,
                float ignoreMinG, float ignoreMaxG, float ignoreMinB, float ignoreMaxB)
        {

            // calculate standard deviation, coefficient of skewness, and coefficient of kurtosis

            double sumR2 = 0, sumG2 = 0, sumB2 = 0;
            double sumR3 = 0, sumG3 = 0, sumB3 = 0;
            double sumR4 = 0, sumG4 = 0, sumB4 = 0;
            sumR2 = sumG2 = sumB2 = sumR3 = sumG3 = sumB3 = sumR4 = sumG4 = sumB4 = 0;
            // Calculate centers of mass
            double xMassR, yMassR, zMassR, xMassG, yMassG, zMassG, xMassB, yMassB, zMassB;
            xMassR = yMassR = zMassR = xMassG = yMassG = zMassG = xMassB = yMassB = zMassB = 0;

            int cnt = 0;

            double diffR, diffG, diffB;
            double R2, R3, R4;
            double G2, G3, G4;
            double B2, B3, B4;
            for ( int i = 0; i < kPositions.size(); i++ )
            {
                Vector3f kPos = kPositions.elementAt(i);
                int x = (int)kPos.X;
                int y = (int)kPos.Y;
                int z = (int)kPos.Z;


                float fR = srcImage.getFloatC(x,y,z,1);
                float fG = srcImage.getFloatC(x,y,z,2);
                float fB = srcImage.getFloatC(x,y,z,3);

                if ( !MipavUtil.inRange(ignoreMinR, ignoreMaxR, fR, rangeFlag) &&
                        !MipavUtil.inRange(ignoreMinG, ignoreMaxG, fG, rangeFlag) &&
                        !MipavUtil.inRange(ignoreMinB, ignoreMaxB, fB, rangeFlag) &&
                        (!Float.isNaN(fR)) && (!Float.isNaN(fG)) && (!Float.isNaN(fB))) {
                    xMassR += x * fR;
                    yMassR += y * fG;
                    zMassR += z * fB;
                    diffR = fR - stats.avgIntenR;
                    R2 = diffR * diffR;
                    sumR2 += R2;
                    R3 = R2 * diffR;
                    sumR3 += R3;
                    R4 = R3 * diffR;
                    sumR4 += R4;
                    xMassG += x * fG;
                    yMassG += y * fG;
                    zMassG += z * fG;
                    diffG = fG - stats.avgIntenG;
                    G2 = diffG * diffG;
                    sumG2 += G2;
                    G3 = G2 * diffG;
                    sumG3 += G3;
                    G4 = G3 * diffG;
                    sumG4 += G4;
                    xMassB += x * fB;
                    yMassB += y * fB;
                    zMassB += z * fB;
                    diffB = fB - stats.avgIntenB;
                    B2 = diffB * diffB;
                    sumB2 += B2;
                    B3 = B2 * diffB;
                    sumB3 += B3;
                    B4 = B3 * diffB;
                    sumB4 += B4;
                    cnt++;
                }
            }

            float stdDevR = (float) Math.sqrt(sumR2 / (cnt-1));
            float stdDevG = (float) Math.sqrt(sumG2 / (cnt-1));
            float stdDevB = (float) Math.sqrt(sumB2/ (cnt-1));
            stats.stdDevR = stdDevR;
            stats.stdDevG = stdDevG;
            stats.stdDevB = stdDevB;

            // moments around the mean
            double moment2R = sumR2/cnt;
            double moment2G = sumG2/cnt;
            double moment2B = sumB2/cnt;
            double moment3R = sumR3/cnt;
            double moment3G = sumG3/cnt;
            double moment3B = sumB3/cnt;
            double moment4R = sumR4/cnt;
            double moment4G = sumG4/cnt;
            double moment4B = sumB4/cnt;
            float skewnessR = (float)(moment3R/Math.pow(moment2R, 1.5));
            float skewnessG = (float)(moment3G/Math.pow(moment2G, 1.5));
            float skewnessB = (float)(moment3B/Math.pow(moment2B, 1.5));
            stats.skewnessR = skewnessR;
            stats.skewnessG = skewnessG;
            stats.skewnessB = skewnessB;
            double kurtosisR = moment4R/(moment2R * moment2R);
            double kurtosisG = moment4G/(moment2G * moment2G);
            double kurtosisB = moment4B/(moment2B * moment2B);
            stats.kurtosisR = kurtosisR;
            stats.kurtosisG = kurtosisG;
            stats.kurtosisB = kurtosisB;
            // Centers of mass
            double xCOMR = xMassR * srcImage.getFileInfo(0).getResolutions()[0]/stats.sumR;
            double yCOMR = yMassR * srcImage.getFileInfo(0).getResolutions()[1]/stats.sumR;
            double zCOMR = zMassR/stats.sumR;
            String unitStr = unit2DStr + "\tZ";
            if (srcImage.getNDims() > 2) {
                zCOMR *= srcImage.getFileInfo(0).getResolutions()[2];
                unitStr = unit3DStr;
            }

            String comStr = unitStr + "\n  Red\t\t" + nf.format(xCOMR) + "\t" + nf.format(yCOMR) + "\t" + nf.format(zCOMR);
            Vector3f centerPt = new Vector3f();
            centerPt.X = (float)xCOMR;
            centerPt.Y = (float)yCOMR;
            centerPt.Z = (float)zCOMR;
            comStr = addScannerLabels(comStr, centerPt);
            stats.massCenterDescriptionR = new String(comStr);

            double xCOMG = xMassG * srcImage.getFileInfo(0).getResolutions()[0]/stats.sumG;
            double yCOMG = yMassG * srcImage.getFileInfo(0).getResolutions()[1]/stats.sumG;
            double zCOMG= zMassG/stats.sumG;
            if (srcImage.getNDims() > 2) {
                zCOMG *= srcImage.getFileInfo(0).getResolutions()[2];
            }

            comStr = "\n  Green\t\t" + nf.format(xCOMG) + "\t" + nf.format(yCOMG) + "\t" + nf.format(zCOMG);
            centerPt = new Vector3f();
            centerPt.X = (float)xCOMG;
            centerPt.Y = (float)yCOMG;
            centerPt.Z = (float)zCOMG;
            comStr = addScannerLabels(comStr, centerPt);
            stats.massCenterDescriptionG = new String(comStr);

            double xCOMB = xMassB * srcImage.getFileInfo(0).getResolutions()[0]/stats.sumB;
            double yCOMB = yMassB * srcImage.getFileInfo(0).getResolutions()[1]/stats.sumB;
            double zCOMB = zMassB/stats.sumB;
            if (srcImage.getNDims() > 2) {
                zCOMB *= srcImage.getFileInfo(0).getResolutions()[2];
            }

            comStr = "\n  Blue\t\t" + nf.format(xCOMB) + "\t" + nf.format(yCOMB) + "\t" + nf.format(zCOMB);
            centerPt = new Vector3f();
            centerPt.X = (float)xCOMB;
            centerPt.Y = (float)yCOMB;
            centerPt.Z = (float)zCOMB;
            comStr = addScannerLabels(comStr, centerPt);
            stats.massCenterDescriptionB = new String(comStr);

            stats.xMass = new double[]{ xMassR, xMassG, xMassB };
            stats.yMass = new double[]{ yMassR, yMassG, yMassB };
            stats.zMass = new double[]{  zMassR, zMassG, zMassB };
        }

        public void run() {
            double largestDistance = 0;
            String xStr, yStr, zStr;
            String unit2DStr = null;
            String unit3DStr = null;
            float ignoreMin = 0.0f;
            float ignoreMax = 0.0f;
            float ignoreMinR = 0.0f;
            float ignoreMaxR = 0.0f;
            float ignoreMinG = 0.0f;
            float ignoreMaxG = 0.0f;
            float ignoreMinB = 0.0f;
            float ignoreMaxB = 0.0f;

            VOIStatisticalProperties statProperty = getVOIProperties(calcSelectedVOI);

            int xDim = srcImage.getExtents().length > 0 ? srcImage.getExtents()[0] : 1;
            int yDim = srcImage.getExtents().length > 1 ? srcImage.getExtents()[1] : 1;
            int zDim = srcImage.getExtents().length > 2 ? srcImage.getExtents()[2] : 1;
            FileInfoBase fileInfo = srcImage.getFileInfo()[zDim/2];
            
            if (srcImage.isColorImage()) {
                ignoreMinR = calcSelectedVOI.getMinimumIgnoreR();
                ignoreMaxR = calcSelectedVOI.getMaximumIgnoreR();
                ignoreMinG = calcSelectedVOI.getMinimumIgnoreG();
                ignoreMaxG = calcSelectedVOI.getMaximumIgnoreG();
                ignoreMinB = calcSelectedVOI.getMinimumIgnoreB();
                ignoreMaxB = calcSelectedVOI.getMaximumIgnoreB();    
            }
            else {
                ignoreMin = calcSelectedVOI.getMinimumIgnore();
                ignoreMax = calcSelectedVOI.getMaximumIgnore();
            }

            int xUnits = srcImage.getFileInfo(0).getUnitsOfMeasure()[0];
            if (xUnits != Unit.UNKNOWN_MEASURE.getLegacyNum()) {
                xStr = "X " + Unit.getUnitFromLegacyNum(xUnits).getAbbrev();    
            }
            else {
                xStr = "X ";
            }
            int yUnits = srcImage.getFileInfo(0).getUnitsOfMeasure()[1];
            if (yUnits != Unit.UNKNOWN_MEASURE.getLegacyNum()) {
                yStr = "Y " + Unit.getUnitFromLegacyNum(yUnits).getAbbrev();    
            }
            else {
                yStr = "Y ";
            }
            unit2DStr = xStr + "\t" + yStr;
            if (srcImage.getNDims() > 2) {
                int zUnits = srcImage.getFileInfo(0).getUnitsOfMeasure()[2];
                if (zUnits != Unit.UNKNOWN_MEASURE.getLegacyNum()) {
                    zStr = "Z " + Unit.getUnitFromLegacyNum(zUnits).getAbbrev();
                    if ((srcImage.getFileInfo(0).getOrigin()[0] != 0) || (srcImage.getFileInfo(0).getOrigin()[1] != 0) ||
                            (srcImage.getFileInfo(0).getOrigin()[2] != 0)) {
                        zStr = zStr + "\tR-L:\tA-P:\tI-S:";
                    }
                }
                else {
                    zStr = "Z ";
                }
                unit3DStr = unit2DStr + "\t" + zStr;
            }

            if ((processType == PROCESS_PER_SLICE) ||
                    (processType == PROCESS_PER_SLICE_AND_CONTOUR)) {

                Vector<ContourStats> allStats = new Vector<ContourStats>();
                
                Vector<VOIBase>[] sortedContoursZ = calcSelectedVOI.getSortedCurves( VOIBase.ZPLANE, zDim );
                for ( int sortedZ = 0; sortedZ < sortedContoursZ.length; sortedZ++ )
                {
                    if ( sortedContoursZ[sortedZ].size() == 0 )
                    {
                        continue;
                    }
                    ContourStats[] stats = new ContourStats[sortedContoursZ[sortedZ].size()];
                    for (int q = 0; q < sortedContoursZ[sortedZ].size(); q++) {
                        if (srcImage.isColorImage()) {
                            stats[q] = calcStatsPerContourRGB( fileInfo, sortedContoursZ[sortedZ].elementAt(q), VOIBase.ZPLANE, 
                                    unit2DStr, unit3DStr, ignoreMinR, ignoreMaxR, ignoreMinG, ignoreMaxG,
                                    ignoreMinB, ignoreMaxB, statProperty, sortedZ, q);    
                        }
                        else {
                            stats[q] = calcStatsPerContour( fileInfo, sortedContoursZ[sortedZ].elementAt(q), VOIBase.ZPLANE, 
                                unit2DStr, unit3DStr, ignoreMin, ignoreMax, statProperty, sortedZ, q);
                        }
                        allStats.add( stats[q] );
                    }         
                    if ( showTotals || (processType == PROCESS_PER_SLICE) )
                    {
                        if (srcImage.isColorImage()) {
                            printTotalsRGB( stats, statProperty, 
                                    unit2DStr, unit3DStr, new String( sortedZ + ";" ), ignoreMinR, ignoreMaxR, 
                                    ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB, largestDistance );    
                        }
                        else {
                            printTotals( stats, statProperty, 
                                unit2DStr, unit3DStr, new String( sortedZ + ";" ), ignoreMin, ignoreMax, largestDistance );
                        }
                    }
                }
                Vector<VOIBase>[] sortedContoursX = calcSelectedVOI.getSortedCurves( VOIBase.XPLANE, xDim );
                for ( int sortedX = 0; sortedX < sortedContoursX.length; sortedX++ )
                {
                    if ( sortedContoursX[sortedX].size() == 0 )
                    {
                        continue;
                    }
                    ContourStats[] stats = new ContourStats[sortedContoursX[sortedX].size()];
                    for (int q = 0; q < sortedContoursX[sortedX].size(); q++) {
                        if (srcImage.isColorImage()) {
                            stats[q] = calcStatsPerContourRGB( fileInfo, sortedContoursX[sortedX].elementAt(q), VOIBase.XPLANE,
                                    unit2DStr, unit3DStr, ignoreMinR, ignoreMaxR, ignoreMinG, ignoreMaxG,
                                    ignoreMinB, ignoreMaxB, statProperty, sortedX, q);    
                        }
                        else {
                            stats[q] = calcStatsPerContour( fileInfo, sortedContoursX[sortedX].elementAt(q), VOIBase.XPLANE,
                                unit2DStr, unit3DStr, ignoreMin, ignoreMax, statProperty, sortedX, q);
                        }
                        allStats.add( stats[q] );
                    }         
                    if ( showTotals || (processType == PROCESS_PER_SLICE) )
                    {
                        if (srcImage.isColorImage()) {
                            printTotalsRGB( stats, statProperty, 
                                    unit2DStr, unit3DStr, new String( sortedX + ";" ), ignoreMinR, ignoreMaxR, 
                                    ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB, largestDistance );
                        }
                        else {
                            printTotals( stats, statProperty, 
                                unit2DStr, unit3DStr, new String( sortedX + ";" ), ignoreMin, ignoreMax, largestDistance );
                        }
                    }
                }
                Vector<VOIBase>[] sortedContoursY = calcSelectedVOI.getSortedCurves( VOIBase.YPLANE, yDim );
                for ( int sortedY = 0; sortedY < sortedContoursY.length; sortedY++ )
                {
                    if ( sortedContoursY[sortedY].size() == 0 )
                    {
                        continue;
                    }
                    ContourStats[] stats = new ContourStats[sortedContoursY[sortedY].size()];
                    for (int q = 0; q < sortedContoursY[sortedY].size(); q++) {
                        if (srcImage.isColorImage()) {
                            stats[q] = calcStatsPerContourRGB( fileInfo, sortedContoursY[sortedY].elementAt(q), VOIBase.YPLANE,
                                    unit2DStr, unit3DStr, ignoreMinR, ignoreMaxR, ignoreMinG, ignoreMaxG,
                                    ignoreMinB, ignoreMaxB, statProperty, sortedY, q);    
                        }
                        else {
                            stats[q] = calcStatsPerContour( fileInfo, sortedContoursY[sortedY].elementAt(q), VOIBase.YPLANE,
                                unit2DStr, unit3DStr, ignoreMin, ignoreMax, statProperty, sortedY, q);
                        }
                        allStats.add( stats[q] );
                    }         
                    if ( showTotals || (processType == PROCESS_PER_SLICE) )
                    {
                        if (srcImage.isColorImage()) {
                            printTotalsRGB( stats, statProperty, 
                                    unit2DStr, unit3DStr, new String( sortedY + ";" ), ignoreMinR, ignoreMaxR, 
                                    ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB, largestDistance );    
                        }
                        else {
                            printTotals( stats, statProperty, 
                                unit2DStr, unit3DStr, new String( sortedY + ";" ), ignoreMin, ignoreMax, largestDistance );
                        }
                    }
                }
                
                if ( showTotals )
                {
                    if (srcImage.isColorImage()) {
                        printTotalsRGB( allStats, statProperty, 
                                unit2DStr, unit3DStr, "Total", ignoreMinR, ignoreMaxR, 
                                ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB, largestDistance );    
                    }
                    else {
                        printTotals( allStats, statProperty, 
                            unit2DStr, unit3DStr, "Total", ignoreMin, ignoreMax, largestDistance );
                    }
                }          
            } else if ( processType == PROCESS_PER_CONTOUR ) {

                Vector<VOIBase> contours = calcSelectedVOI.getCurves();
                ContourStats[] stats = new ContourStats[contours.size()];
                for (int q = 0; q < contours.size(); q++) {
                	int orientation = contours.get(q).getPlane();
                    if (srcImage.isColorImage()) {
                        stats[q] = calcStatsPerContourRGB( fileInfo, contours.elementAt(q), orientation,
                                unit2DStr, unit3DStr, ignoreMinR, ignoreMaxR, 
                                ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB, statProperty, -1, q);    
                    }
                    else {
                        stats[q] = calcStatsPerContour( fileInfo, contours.elementAt(q), orientation,
                            unit2DStr, unit3DStr, ignoreMin, ignoreMax, statProperty, -1, q);
                    }
                }               
                if ( showTotals )
                {
                    if (srcImage.isColorImage()) {
                        printTotalsRGB( stats, statProperty, 
                                unit2DStr, unit3DStr, "Total", ignoreMinR, ignoreMaxR, 
                                ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB, largestDistance );    
                    }
                    else {
                        printTotals( stats, statProperty, 
                            unit2DStr, unit3DStr, "Total", ignoreMin, ignoreMax, largestDistance );
                    }
                }
                else
                {
                    if (srcImage.isColorImage()) {
                        printTotalsRGB( stats, statProperty, 
                                unit2DStr, unit3DStr, "", ignoreMinR, ignoreMaxR, 
                                ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB, largestDistance );    
                    }
                    else {
                        printTotals( stats, statProperty, 
                            unit2DStr, unit3DStr, "", ignoreMin, ignoreMax, largestDistance );
                    }
                }
            }
            else
            {
                if (srcImage.isColorImage()) {
                    calcStatsTotalRGB( calcSelectedVOI, statProperty, fileInfo, unit2DStr, unit3DStr, ignoreMinR, ignoreMaxR,
                            ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB);    
                }
                else {
                    calcStatsTotal( calcSelectedVOI, statProperty, fileInfo, unit2DStr, unit3DStr, ignoreMin, ignoreMax );
                }
            }

            //System.out.println("Time required to calculate "+calcSelectedVOI.getName()+": "+(System.currentTimeMillis() - time));
        }



        /**
         * Calculates statistics for a single contour. Calculations are done on an as-needed basis for faster performance.
         * @param fileInfo information on image resolutions and dimensions
         * @param contour input contour
         * @param orientation the image plane the contour is on
         * @param unit2DStr 2D label string
         * @param unit3DStr 3D label string
         * @param ignoreMin threshold minimum
         * @param ignoreMax threshold maximum
         * @param statProperty output labels are written to statProperty
         * @param iSlice contour slice
         * @param iID contour iD
         * @return ContourStats data structure contains the statistic values.
         */
        private ContourStats calcStatsPerContour( FileInfoBase fileInfo, VOIBase contour, int orientation,
                String unit2DStr, String unit3DStr, float ignoreMin, float ignoreMax,
                VOIStatisticalProperties statProperty, int iSlice, int iID  )
        {
            String end = new String();
            if ( iSlice != -1 )
            {
                end += iSlice + ";";
            }
            end += contour.getLabel();
            //System.err.println( "calcStatsPerContour "  + end );
            
            contour.update();
            ContourStats stats = new ContourStats();

            contour.getGroup().setAllActive(false);
            contour.setActive(true);
            
            Vector3f kMinMax = new Vector3f();
            
           
            stats.values = contour.calcIntensity( srcImage, kMinMax, ignoreMin, ignoreMax, rangeFlag );
            
            // The following depend on each other: quantityDescription, volumeDescription, areaDescription,
            // circularityDescription, solidityDescription
            // If one is selected, all are calculated.
            if ( statsList[ indexOf( quantityDescription ) ] || 
                    statsList[ indexOf( volumeDescription ) ] ||
                    statsList[ indexOf( areaDescription ) ] || 
                    statsList[ indexOf( circularityDescription)] ||
                    statsList[ indexOf( solidityDescription)])
            {               
                
                stats.nVox = stats.values.size();

                if (orientation == VOIBase.ZPLANE) {
                    stats.area = stats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[1]);
                    stats.volume = stats.area * fileInfo.getResolutions()[2]; 
                }
                else if (orientation == VOIBase.XPLANE) {
                	stats.area = stats.nVox * (fileInfo.getResolutions()[1] * fileInfo.getResolutions()[2]);
                    stats.volume = stats.area * fileInfo.getResolutions()[0]; 
                }
                else {
                	stats.area = stats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[2]);
                    stats.volume = stats.area * fileInfo.getResolutions()[1]; 
                }

                statProperty.setProperty(VOIStatisticList.quantityDescription + end, nf.format(stats.nVox));
                statProperty.setProperty(VOIStatisticList.areaDescription + end, nf.format(stats.area));
                statProperty.setProperty(VOIStatisticList.volumeDescription + end, nf.format(stats.volume));
            }
            // If user selects perimeterDescription or circularityDescription:
            if ( statsList[ indexOf( perimeterDescription ) ] || statsList[ indexOf( circularityDescription)])
            {               
                stats.perimeter = contour.getLengthPtToPt(srcImage.getFileInfo(0).getResolutions());   
                statProperty.setProperty(VOIStatisticList.perimeterDescription + end, nf.format(stats.perimeter));       
            }
            
            if ( statsList[indexOf(circularityDescription)]) {
                stats.circularity = (4.0 * Math.PI * stats.area)/(stats.perimeter * stats.perimeter);
                statProperty.setProperty(VOIStatisticList.circularityDescription + end, nf.format(stats.circularity));
            }
            
            if ( statsList[indexOf(solidityDescription)]) {
                VOIBase convexContour = new VOIContour((VOIContour)contour);
                
                ((VOIContour)convexContour).convexHull();
                convexContour.update();
                ContourStats convexStats = new ContourStats();

                convexContour.getGroup().setAllActive(false);
                convexContour.setActive(true);
                
                Vector3f kMinMaxConvex = new Vector3f();
                
               
                convexStats.values = convexContour.calcIntensity( srcImage, kMinMaxConvex, ignoreMin, ignoreMax, rangeFlag );
                convexStats.nVox = convexStats.values.size();

                if (orientation == VOIBase.ZPLANE) {
                    stats.hullArea = convexStats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[1]);
                }
                else if (orientation == VOIBase.XPLANE) {
                	stats.hullArea = convexStats.nVox * (fileInfo.getResolutions()[1] * fileInfo.getResolutions()[2]);	
                }
                else {
                	stats.hullArea = convexStats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[2]);		
                }
                stats.solidity = stats.area/stats.hullArea;
                statProperty.setProperty(VOIStatisticList.solidityDescription + end, nf.format(stats.solidity));
            }
            
            if (statsList[indexOf(numberOfIndentationsHullDescription)]) {
                int sliceNum = Math.round(contour.elementAt(0).Z);
                stats.numberOfIndentationsHull = contour.findVOIIndentations2D(srcImage, sliceNum, null, false); 
                statProperty.setProperty(VOIStatisticList.numberOfIndentationsHullDescription + end, nf.format(stats.numberOfIndentationsHull));
            }
            
            if (statsList[indexOf(meanCurvatureDescription)] ||
                    statsList[indexOf(stdDevCurvatureDescription)] ||
                    statsList[indexOf(meanNegativeCurvatureDescription)] ||
                    statsList[indexOf(numberOfIndentationsCurvatureDescription)]) {
                Vector<Vector3f> positions = new Vector<Vector3f>();
                Vector<Float> curvature = new Vector<Float>();

                double meanCurvature[] = new double[1];
                double stdDevCurvature[] = new double[1];
                double meanNegativeCurvature[] = new double[1];
                int numberOfIndentations[] = new int[1];
                double totalLength[] = new double[1];
                VOIBase convexContour = new VOIContour((VOIContour)contour);
                convexContour.findPositionAndCurvature(positions, curvature, smoothCurvature, meanCurvature, stdDevCurvature,
                                                        meanNegativeCurvature, negativeHysteresisFraction,
                                                        positiveHysteresisFraction, numberOfIndentations,
                                                        consecutiveNegativeNeeded, negativeCurvatureNeeded,
                                                        totalLength);
                if (statsList[indexOf(meanCurvatureDescription)]) {
                    stats.meanCurvature = meanCurvature[0];
                    statProperty.setProperty(VOIStatisticList.meanCurvatureDescription + end, nf.format(stats.meanCurvature));    
                }
                if (statsList[indexOf(stdDevCurvatureDescription)]) {
                    stats.stdDevCurvature = stdDevCurvature[0];
                    statProperty.setProperty(VOIStatisticList.stdDevCurvatureDescription + end, nf.format(stats.stdDevCurvature));    
                }
                if (statsList[indexOf(meanNegativeCurvatureDescription)]) {
                    stats.meanNegativeCurvature = meanNegativeCurvature[0];
                    statProperty.setProperty(VOIStatisticList.meanNegativeCurvatureDescription + end,
                                             nf.format(stats.meanNegativeCurvature));    
                }
                if (statsList[indexOf(numberOfIndentationsCurvatureDescription)]) {
                    stats.numberOfIndentationsCurvature = numberOfIndentations[0];
                    statProperty.setProperty(VOIStatisticList.numberOfIndentationsCurvatureDescription + end,
                                             nf.format(stats.numberOfIndentationsCurvature));
                }
            }
            
            // The following statistics are derived from the minIntensity, maxIntensity, avgIntensity, and sumIntensity:
            // median, mode, modeCount 
            // deviationDescription, skewnessDescription, kurtosisDescription, massCenterDescription
            if ( statsList[ indexOf( minIntensity ) ] ||
                    statsList[ indexOf( maxIntensity ) ] ||
                    statsList[ indexOf( avgIntensity ) ] ||
                    statsList[ indexOf( sumIntensities ) ] ||   

                    statsList[ indexOf( median ) ] || 
                    statsList[ indexOf( mode ) ] || 
                    statsList[ indexOf( modeCount ) ] ||

                    statsList[ indexOf( deviationDescription ) ] ||
                    statsList[ indexOf( skewnessDescription ) ] || 
                    statsList[ indexOf( kurtosisDescription ) ] ||
                    statsList[ indexOf( massCenterDescription ) ]  )
            {                   
                stats.nVox = contour.getNumVoxels();       
                
                    
                stats.minIntensity = kMinMax.X;
                stats.maxIntensity = kMinMax.Y;
                stats.sum = kMinMax.Z;
                if(stats.nVox != 0) {
                    stats.avgInten = stats.sum/stats.nVox;
                } else {
                    stats.avgInten = 0;
                }

                statProperty.setProperty(VOIStatisticList.minIntensity + end, nf.format(stats.minIntensity));
                statProperty.setProperty(VOIStatisticList.maxIntensity + end, nf.format(stats.maxIntensity));
                statProperty.setProperty(VOIStatisticList.avgIntensity + end, nf.format(stats.avgInten));
                statProperty.setProperty(VOIStatisticList.sumIntensities + end, nf.format(stats.sum));
            // median, mode and modeCount
                if ( statsList[ indexOf( median ) ] || statsList[ indexOf( mode ) ] || statsList[ indexOf( modeCount ) ] )
                {               
                    
                    getMedianStatistics( stats );
                    statProperty.setProperty(VOIStatisticList.median + end, nf.format(stats.median));
                    statProperty.setProperty(VOIStatisticList.mode + end, nf.format(stats.mode));
                    statProperty.setProperty(VOIStatisticList.modeCount + end, nf.format(stats.maxCount));
                }

                // deviationDescription, skewnessDescription, kurtosisDescription, massCenterDescription
                if ( statsList[ indexOf( deviationDescription ) ] ||
                        statsList[ indexOf( skewnessDescription ) ] || 
                        statsList[ indexOf( kurtosisDescription ) ] ||
                        statsList[ indexOf( massCenterDescription ) ]    )
                {       
                    stats.maskPositions = contour.getMaskPositions();
                    
                    getStdSkewStatistics(stats, stats.maskPositions, 
                            unit2DStr, unit3DStr, ignoreMin, ignoreMax);
                    statProperty.setProperty(VOIStatisticList.deviationDescription + end, nf.format(stats.stdDev));
                    statProperty.setProperty(VOIStatisticList.skewnessDescription + end, nf.format(stats.skewness));
                    statProperty.setProperty(VOIStatisticList.kurtosisDescription + end, nf.format(stats.kurtosis));
                    statProperty.setProperty(VOIStatisticList.massCenterDescription + end, stats.massCenterDescription);
                }

            }
            // If user selects geometricCenterDescription
            if ( statsList[ indexOf( geometricCenterDescription ) ] )
            {               
                Vector3f gCenter = contour.getGeometricCenter();
                gCenter.X *= srcImage.getFileInfo(0).getResolutions()[0];
                gCenter.Y *= srcImage.getFileInfo(0).getResolutions()[1];
                String unitStr = unit2DStr + "\tZ";

                if (srcImage.getNDims() > 2) {
                    gCenter.Z *= srcImage.getFileInfo(0).getResolutions()[2];
                    unitStr = unit3DStr;
                }

                String comStr = unitStr + "\n\t\t" + nf.format(gCenter.X) + "\t" + nf.format(gCenter.Y) + "\t" +  nf.format(gCenter.Z);
                comStr = addScannerLabels(comStr, gCenter);
                stats.gCenterString = new String(comStr);
                statProperty.setProperty(VOIStatisticList.geometricCenterDescription + end, stats.gCenterString);
            }
            // Ellipsoid fit parameters are calculated as a group, if one is selected, calculate all:
            if ( statsList[ indexOf( eccentricityDescription ) ] ||
                    statsList[ indexOf( majorAxisDescription ) ] ||
                    statsList[ indexOf( minorAxisDescription ) ] )
            {               
                float[] tmpPAxis = new float[1];
                float[] tmpEcc = new float[1];
                float[] tmpMajorAxis = new float[1];
                float[] tmpMinorAxis = new float[1];
                ((VOIContour)contour).secondOrderAttributes(srcImage,
                        tmpPAxis, tmpEcc, tmpMajorAxis,
                        tmpMinorAxis);
                stats.Ecc = tmpEcc[0];
                stats.MajorAxis = tmpMajorAxis[0];
                stats.MinorAxis = tmpMinorAxis[0];

                statProperty.setProperty(VOIStatisticList.eccentricityDescription + end, nf.format(stats.Ecc));
                statProperty.setProperty(VOIStatisticList.majorAxisDescription + end, nf.format(stats.MajorAxis));
                statProperty.setProperty(VOIStatisticList.minorAxisDescription + end, nf.format(stats.MinorAxis));
            }
            
            if (statsList[ indexOf(axisDescription)]) {
                stats.PAxis = ((VOIContour)contour).principalAxis(srcImage.getExtents()[0], srcImage.getExtents()[1]);
                statProperty.setProperty(VOIStatisticList.axisDescription + end, nf.format(stats.PAxis));
            }
            
            // If user selects largestSliceDistanceDescription:
            if ( statsList[ indexOf( largestSliceDistanceDescription ) ] )
            {               
                Vector3f kPos1 = new Vector3f();
                Vector3f kPos2 = new Vector3f();
                stats.largestContourDistance = ((VOIContour) (contour)).calcLargestSliceDistance( srcImage.getExtents(),
                        fileInfo.getResolutions(), kPos1, kPos2);
                // Uncomment the following to at the VOILine to the image:
                //VOILine kLine = new VOILine();
                //kLine.add(kPos1);
                //kLine.add(kPos2);
                //VOI kVOI = new VOI( (short)srcImage.getVOIs().size(), "LargestDist", VOI.LINE, 0  );
                //kVOI.importCurve(kLine);
                //srcImage.registerVOI(kVOI);

                statProperty.setProperty(VOIStatisticList.largestSliceDistanceDescription + end, nf.format(stats.largestContourDistance));
            }
            
            if (statsList[ indexOf(asymmetryIndexDescription)]) {
                stats.asymmetryIndex = ((VOIContour)contour).calcAsymmetryIndex(srcImage.getExtents()[0], srcImage.getExtents()[1]);
                statProperty.setProperty(VOIStatisticList.asymmetryIndexDescription + end, nf.format(stats.asymmetryIndex));
            }
            
            if (statsList[indexOf(fractalDimensionBoxCountDescription)]) {
                stats.fractalDimensionBoxCount = ((VOIContour)contour).boxCountBoundary2D(srcImage.getExtents()[0], 
                        srcImage.getExtents()[1]);
                statProperty.setProperty(VOIStatisticList.fractalDimensionBoxCountDescription + end, nf.format(stats.fractalDimensionBoxCount));
            }
            
            if (statsList[indexOf(fractalDimensionEuclideanDistanceDescription)]) {
                stats.fractalDimensionEuclideanDistance = ((VOIContour)contour).euclideanDistance2D(srcImage.getExtents()[0], 
                        srcImage.getExtents()[1]);
                statProperty.setProperty(VOIStatisticList.fractalDimensionEuclideanDistanceDescription + end, 
                        nf.format(stats.fractalDimensionEuclideanDistance));
            }
            
            return stats;
        }
        
        /**
         * Calculates statistics for a single contour. Calculations are done on an as-needed basis for faster performance.
         * @param fileInfo information on image resolutions and dimensions
         * @param contour input contour
         * @param orientation the image plane the contour is on
         * @param unit2DStr 2D label string
         * @param unit3DStr 3D label string
         * @param ignoreMinR threshold minimum red
         * @param ignoreMaxR threshold maximum red
         * @param ignoreMinG threshold minimum green
         * @param ignoreMaxG threshold maximum green
         * @param ignoreMinB threshold minimum blue
         * @param ignoreMaxB threshold maximum blue
         * @param statProperty output labels are written to statProperty
         * @param iSlice contour slice
         * @param iID contour iD
         * @return ContourStats data structure contains the statistic values.
         */
        private ContourStats calcStatsPerContourRGB( FileInfoBase fileInfo, VOIBase contour, int orientation,
                String unit2DStr, String unit3DStr, float ignoreMinR, float ignoreMaxR, float ignoreMinG, float ignoreMaxG,
                float ignoreMinB, float ignoreMaxB, VOIStatisticalProperties statProperty, int iSlice, int iID  )
        {
            String end = new String();
            if ( iSlice != -1 )
            {
                end += iSlice + ";";
            }
            end += contour.getLabel();
            //System.err.println( "calcStatsPerContour "  + end );
            
            contour.update();
            ContourStats stats = new ContourStats();

            contour.getGroup().setAllActive(false);
            contour.setActive(true);

            //Initialize contour intensity counts
            ColorRGB kMin = new ColorRGB();
            ColorRGB kMax = new ColorRGB();
            ColorRGB kSum = new ColorRGB();
            
            stats.valuesRGB = contour.calcRGBIntensity( srcImage, kMin, kMax, kSum,
                    ignoreMinR, ignoreMaxR, ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB, rangeFlag );
           
            
            // The following depend on each other: quantityDescription, volumeDescription, areaDescription,
            // circularityDescription, solidityDescription
            // If one is selected, all are calculated.
            if ( statsList[ indexOf( quantityDescription ) ] || 
                    statsList[ indexOf( volumeDescription ) ] ||
                    statsList[ indexOf( areaDescription ) ] ||
                    statsList[ indexOf( circularityDescription)] ||
                    statsList[ indexOf( solidityDescription)])
            {               
                
                stats.nVox = stats.valuesRGB.size();

                if (orientation == VOIBase.ZPLANE) {
                    stats.area = stats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[1]);
                    stats.volume = stats.area * fileInfo.getResolutions()[2]; 
                }
                else if (orientation == VOIBase.XPLANE) {
                	stats.area = stats.nVox * (fileInfo.getResolutions()[1] * fileInfo.getResolutions()[2]);
                    stats.volume = stats.area * fileInfo.getResolutions()[0]; 	
                }
                else {
                	stats.area = stats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[2]);
                    stats.volume = stats.area * fileInfo.getResolutions()[1]; 		
                } 

                statProperty.setProperty(VOIStatisticList.quantityDescription + end, nf.format(stats.nVox));
                statProperty.setProperty(VOIStatisticList.areaDescription + end, nf.format(stats.area));
                statProperty.setProperty(VOIStatisticList.volumeDescription + end, nf.format(stats.volume));
            }
            // If user selects perimeterDescription or circularityDescription:
            if ( statsList[ indexOf( perimeterDescription ) ] || (statsList[ indexOf( circularityDescription)]) )
            {               
                stats.perimeter = contour.getLengthPtToPt(srcImage.getFileInfo(0).getResolutions());   
                statProperty.setProperty(VOIStatisticList.perimeterDescription + end, nf.format(stats.perimeter));       
            }
            
            if ( statsList[indexOf(circularityDescription)]) {
                stats.circularity = (4.0 * Math.PI * stats.area)/(stats.perimeter * stats.perimeter);
                statProperty.setProperty(VOIStatisticList.circularityDescription + end, nf.format(stats.circularity));
            }
            
            if ( statsList[indexOf(solidityDescription)]) {
                VOIBase convexContour = new VOIContour((VOIContour)contour);
                ((VOIContour)convexContour).convexHull();
                convexContour.update();
                ContourStats convexStats = new ContourStats();

                convexContour.getGroup().setAllActive(false);
                convexContour.setActive(true);
                
                //Initialize contour intensity counts
                ColorRGB kMinConvex = new ColorRGB();
                ColorRGB kMaxConvex = new ColorRGB();
                ColorRGB kSumConvex = new ColorRGB();
                
                convexStats.valuesRGB = convexContour.calcRGBIntensity( srcImage, kMinConvex, kMaxConvex, kSumConvex,
                        ignoreMinR, ignoreMaxR, ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB, rangeFlag );
                
                convexStats.nVox = convexStats.valuesRGB.size();

                if (orientation == VOIBase.ZPLANE) {
                    stats.hullArea = convexStats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[1]);
                }
                else if (orientation == VOIBase.XPLANE) {
                	stats.hullArea = convexStats.nVox * (fileInfo.getResolutions()[1] * fileInfo.getResolutions()[2]);	
                }
                else {
                	stats.hullArea = convexStats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[2]);		
                }
                stats.solidity = stats.area/stats.hullArea;
                statProperty.setProperty(VOIStatisticList.solidityDescription + end, nf.format(stats.solidity));
            }
            
            if (statsList[indexOf(numberOfIndentationsHullDescription)]) {
                int sliceNum = Math.round(contour.elementAt(0).Z);
                stats.numberOfIndentationsHull = contour.findVOIIndentations2D(srcImage, sliceNum, null, false); 
                statProperty.setProperty(VOIStatisticList.numberOfIndentationsHullDescription + end, nf.format(stats.numberOfIndentationsHull));
            }
            
            if (statsList[indexOf(meanCurvatureDescription)] ||
                    statsList[indexOf(stdDevCurvatureDescription)] ||
                    statsList[indexOf(meanNegativeCurvatureDescription)] ||
                    statsList[indexOf(numberOfIndentationsCurvatureDescription)]) {
                Vector<Vector3f> positions = new Vector<Vector3f>();
                Vector<Float> curvature = new Vector<Float>();

                double meanCurvature[] = new double[1];
                double stdDevCurvature[] = new double[1];
                double meanNegativeCurvature[] = new double[1];
                int numberOfIndentations[] = new int[1];
                double totalLength[] = new double[1];
                VOIBase convexContour = new VOIContour((VOIContour)contour);
                convexContour.findPositionAndCurvature( positions, curvature, smoothCurvature, meanCurvature, stdDevCurvature,
                                                        meanNegativeCurvature, negativeHysteresisFraction,
                                                        positiveHysteresisFraction, numberOfIndentations,
                                                        consecutiveNegativeNeeded, negativeCurvatureNeeded,
                                                        totalLength);
                if (statsList[indexOf(meanCurvatureDescription)]) {
                    stats.meanCurvature = meanCurvature[0];
                    statProperty.setProperty(VOIStatisticList.meanCurvatureDescription + end, nf.format(stats.meanCurvature));    
                }
                if (statsList[indexOf(stdDevCurvatureDescription)]) {
                    stats.stdDevCurvature = stdDevCurvature[0];
                    statProperty.setProperty(VOIStatisticList.stdDevCurvatureDescription + end, nf.format(stats.stdDevCurvature));    
                }
                if (statsList[indexOf(meanNegativeCurvatureDescription)]) {
                    stats.meanNegativeCurvature = meanNegativeCurvature[0];
                    statProperty.setProperty(VOIStatisticList.meanNegativeCurvatureDescription + end,
                                             nf.format(stats.meanNegativeCurvature));    
                }
                if (statsList[indexOf(numberOfIndentationsCurvatureDescription)]) {
                    stats.numberOfIndentationsCurvature = numberOfIndentations[0];
                    statProperty.setProperty(VOIStatisticList.numberOfIndentationsCurvatureDescription + end,
                                             nf.format(stats.numberOfIndentationsCurvature));
                }
            }
            
            // The following statistics are derived from the minIntensity, maxIntensity, avgIntensity, and sumIntensity:
            // median, mode, modeCount 
            // deviationDescription, skewnessDescription, kurtosisDescription, massCenterDescription
            if ( statsList[ indexOf( minIntensity ) ] ||
                    statsList[ indexOf( maxIntensity ) ] ||
                    statsList[ indexOf( avgIntensity ) ] ||
                    statsList[ indexOf( sumIntensities ) ] ||   

                    statsList[ indexOf( median ) ] || 
                    statsList[ indexOf( mode ) ] || 
                    statsList[ indexOf( modeCount ) ] ||

                    statsList[ indexOf( deviationDescription ) ] ||
                    statsList[ indexOf( skewnessDescription ) ] || 
                    statsList[ indexOf( kurtosisDescription ) ] ||
                    statsList[ indexOf( massCenterDescription ) ]  )
            {                   
                stats.nVox = contour.getNumVoxels();       

                stats.minIntenRed = kMin.R;
                stats.minIntenGreen = kMin.G;
                stats.minIntenBlue = kMin.B;

                stats.maxIntenRed = kMax.R;
                stats.maxIntenGreen = kMax.G;
                stats.maxIntenBlue = kMax.B;

                stats.sumR = kSum.R;
                stats.sumG = kSum.G;
                stats.sumB = kSum.B;
                if(stats.nVox != 0) {
                    stats.avgIntenR = kSum.R/stats.nVox;
                    stats.avgIntenG = kSum.G/stats.nVox;
                    stats.avgIntenB = kSum.B/stats.nVox;                 
                } else {
                    stats.avgIntenR = 0;
                    stats.avgIntenG = 0;
                    stats.avgIntenB = 0;   
                }

                statProperty.setProperty(VOIStatisticList.minIntensity + "Red" + end, nf.format(stats.minIntenRed));
                statProperty.setProperty(VOIStatisticList.maxIntensity + "Red" + end, nf.format(stats.maxIntenRed));
                statProperty.setProperty(VOIStatisticList.minIntensity + "Green" + end,
                        nf.format(stats.minIntenGreen));
                statProperty.setProperty(VOIStatisticList.maxIntensity + "Green" + end,
                        nf.format(stats.maxIntenGreen));
                statProperty.setProperty(VOIStatisticList.minIntensity + "Blue" + end, nf.format(stats.minIntenBlue));
                statProperty.setProperty(VOIStatisticList.maxIntensity + "Blue" + end, nf.format(stats.maxIntenBlue));
                statProperty.setProperty(VOIStatisticList.avgIntensity + "Red" + end, nf.format(stats.avgIntenR));
                statProperty.setProperty(VOIStatisticList.avgIntensity + "Green" + end, nf.format(stats.avgIntenG));
                statProperty.setProperty(VOIStatisticList.avgIntensity + "Blue" + end, nf.format(stats.avgIntenB));
                statProperty.setProperty(VOIStatisticList.sumIntensities + "Red"  + end, nf.format(stats.sumR));
                statProperty.setProperty(VOIStatisticList.sumIntensities + "Green" + end, nf.format(stats.sumG));
                statProperty.setProperty(VOIStatisticList.sumIntensities + "Blue" + end, nf.format(stats.sumB));
               
                // median, mode and modeCount
                if ( statsList[ indexOf( median ) ] || statsList[ indexOf( mode ) ] || statsList[ indexOf( modeCount ) ] )
                {               
                    getMedianStatisticsRGB( stats );
                    statProperty.setProperty(VOIStatisticList.median + "Red" + end, nf.format(stats.medianR));
                    statProperty.setProperty(VOIStatisticList.median + "Green" + end, nf.format(stats.medianG));
                    statProperty.setProperty(VOIStatisticList.median + "Blue" + end, nf.format(stats.medianB));

                    statProperty.setProperty(VOIStatisticList.mode + "Red" + end, nf.format(stats.modeR));
                    statProperty.setProperty(VOIStatisticList.mode + "Green" + end, nf.format(stats.modeG));
                    statProperty.setProperty(VOIStatisticList.mode + "Blue" + end, nf.format(stats.modeB));

                    statProperty.setProperty(VOIStatisticList.modeCount + "Red" + end, nf.format(stats.maxCountR));
                    statProperty.setProperty(VOIStatisticList.modeCount + "Green" + end, nf.format(stats.maxCountG));
                    statProperty.setProperty(VOIStatisticList.modeCount + "Blue" + end, nf.format(stats.maxCountB));
                    
                }

                // deviationDescription, skewnessDescription, kurtosisDescription, massCenterDescription
                if ( statsList[ indexOf( deviationDescription ) ] ||
                        statsList[ indexOf( skewnessDescription ) ] || 
                        statsList[ indexOf( kurtosisDescription ) ] ||
                        statsList[ indexOf( massCenterDescription ) ]    )
                {       
                    stats.maskPositions = contour.getMaskPositions();
                   
                    getStdSkewStatisticsRGB(stats, stats.maskPositions, 
                            unit2DStr, unit3DStr, ignoreMinR, ignoreMaxR,
                            ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB); 
                    statProperty.setProperty(VOIStatisticList.deviationDescription + "Red" + end,
                            nf.format(stats.stdDevR));
                    statProperty.setProperty(VOIStatisticList.deviationDescription + "Green" + end,
                            nf.format(stats.stdDevG));
                    statProperty.setProperty(VOIStatisticList.deviationDescription + "Blue" + end,
                            nf.format(stats.stdDevB));
                    statProperty.setProperty(VOIStatisticList.skewnessDescription + "Red" + end,
                            nf.format(stats.skewnessR));
                    statProperty.setProperty(VOIStatisticList.skewnessDescription + "Green" + end,
                            nf.format(stats.skewnessG));
                    statProperty.setProperty(VOIStatisticList.skewnessDescription + "Blue" + end,
                            nf.format(stats.skewnessB));
                    statProperty.setProperty(VOIStatisticList.kurtosisDescription + "Red" + end,
                            nf.format(stats.kurtosisR));
                    statProperty.setProperty(VOIStatisticList.kurtosisDescription + "Green" + end,
                            nf.format(stats.kurtosisG));
                    statProperty.setProperty(VOIStatisticList.kurtosisDescription + "Blue" + end,
                            nf.format(stats.kurtosisB));
                    statProperty.setProperty(VOIStatisticList.massCenterDescription + "Red" + end, stats.massCenterDescriptionR);
                    statProperty.setProperty(VOIStatisticList.massCenterDescription + "Green" + end, stats.massCenterDescriptionG);
                    statProperty.setProperty(VOIStatisticList.massCenterDescription + "Blue" + end, stats.massCenterDescriptionB);

                }

            }
            // If user selects geometricCenterDescription
            if ( statsList[ indexOf( geometricCenterDescription ) ] )
            {               
                Vector3f gCenter = contour.getGeometricCenter();
                gCenter.X *= srcImage.getFileInfo(0).getResolutions()[0];
                gCenter.Y *= srcImage.getFileInfo(0).getResolutions()[1];
                String unitStr = unit2DStr + "\tZ";

                if (srcImage.getNDims() > 2) {
                    gCenter.Z *= srcImage.getFileInfo(0).getResolutions()[2];
                    unitStr = unit3DStr;
                }

                String comStr = unitStr + "\n\t\t" + nf.format(gCenter.X) + "\t" + nf.format(gCenter.Y) + "\t" +  nf.format(gCenter.Z);
                comStr = addScannerLabels(comStr, gCenter);
                stats.gCenterString = new String(comStr);
                statProperty.setProperty(VOIStatisticList.geometricCenterDescription + end, stats.gCenterString);
            }
            // Ellipsoid fit parameters are calculated as a group, if one is selected, calculate all:
            if ( statsList[ indexOf( eccentricityDescription ) ] ||
                    statsList[ indexOf( majorAxisDescription ) ] ||
                    statsList[ indexOf( minorAxisDescription ) ] )
            {               
                float[] tmpPAxis = new float[1];
                float[] tmpEcc = new float[1];
                float[] tmpMajorAxis = new float[1];
                float[] tmpMinorAxis = new float[1];
                ((VOIContour)contour).secondOrderAttributes(srcImage,
                        tmpPAxis, tmpEcc, tmpMajorAxis,
                        tmpMinorAxis);
                stats.Ecc = tmpEcc[0];
                stats.MajorAxis = tmpMajorAxis[0];
                stats.MinorAxis = tmpMinorAxis[0];

                statProperty.setProperty(VOIStatisticList.eccentricityDescription + end, nf.format(stats.Ecc));
                statProperty.setProperty(VOIStatisticList.majorAxisDescription + end, nf.format(stats.MajorAxis));
                statProperty.setProperty(VOIStatisticList.minorAxisDescription + end, nf.format(stats.MinorAxis));
            }
            
            if (statsList[ indexOf(axisDescription)]) {
                stats.PAxis = ((VOIContour)contour).principalAxis(srcImage.getExtents()[0], srcImage.getExtents()[1]);
                statProperty.setProperty(VOIStatisticList.axisDescription + end, nf.format(stats.PAxis));
            }
            
            // If user selects largestSliceDistanceDescription:
            if ( statsList[ indexOf( largestSliceDistanceDescription ) ] )
            {               
                Vector3f kPos1 = new Vector3f();
                Vector3f kPos2 = new Vector3f();
                stats.largestContourDistance = ((VOIContour) (contour)).calcLargestSliceDistance( srcImage.getExtents(),
                        fileInfo.getResolutions(), kPos1, kPos2);
                // Uncomment the following to at the VOILine to the image:
                //VOILine kLine = new VOILine();
                //kLine.add(kPos1);
                //kLine.add(kPos2);
                //VOI kVOI = new VOI( (short)srcImage.getVOIs().size(), "LargestDist", VOI.LINE, 0  );
                //kVOI.importCurve(kLine);
                //srcImage.registerVOI(kVOI);

                statProperty.setProperty(VOIStatisticList.largestSliceDistanceDescription + end, nf.format(stats.largestContourDistance));
            }
            
            if (statsList[ indexOf(asymmetryIndexDescription)]) {
                stats.asymmetryIndex = ((VOIContour)contour).calcAsymmetryIndex(srcImage.getExtents()[0], srcImage.getExtents()[1]);
                statProperty.setProperty(VOIStatisticList.asymmetryIndexDescription + end, nf.format(stats.asymmetryIndex));
            }
            
            if (statsList[indexOf(fractalDimensionBoxCountDescription)]) {
                stats.fractalDimensionBoxCount = ((VOIContour)contour).boxCountBoundary2D(srcImage.getExtents()[0], 
                        srcImage.getExtents()[1]);
                statProperty.setProperty(VOIStatisticList.fractalDimensionBoxCountDescription + end, nf.format(stats.fractalDimensionBoxCount));
            }
            
            if (statsList[indexOf(fractalDimensionEuclideanDistanceDescription)]) {
                stats.fractalDimensionEuclideanDistance = ((VOIContour)contour).euclideanDistance2D(srcImage.getExtents()[0], 
                        srcImage.getExtents()[1]);
                statProperty.setProperty(VOIStatisticList.fractalDimensionEuclideanDistanceDescription + end, 
                        nf.format(stats.fractalDimensionEuclideanDistance));
            }
            
            return stats;
        }
        /**
         * Calculates the statistics for the VOI as a whole (across all contours within the VOI).
         * Calculations are done on an as-needed basis for faster performance.
         * @param contours list of contours in the VOI
         * @param statProperty stores the calculated output
         * @param fileInfo information for image resolutions
         * @param unit2DStr 2D label string
         * @param unit3DStr 3D label string
         * @param ignoreMin threshold minimum
         * @param ignoreMax threshold maximum
         * @param largestDistance largest Distance in the VOI.
        private void calcStatsTotal( Vector<VOIBase> contours, VOIStatisticalProperties statProperty,
                FileInfoBase fileInfo, 
                String unit2DStr, String unit3DStr, float ignoreMin, float ignoreMax, double largestDistance )
        {
            ContourStats stats = new ContourStats();
            // The following depend on each other: quantityDescription, volumeDescription, areaDescription,
            // circularityDescription, solidityDescription
            // If one is selected, all are calculated.
            if ( statsList[ indexOf( quantityDescription ) ] || 
                    statsList[ indexOf( volumeDescription ) ] ||
                    statsList[ indexOf( areaDescription ) ] || 
                    statsList[ indexOf( circularityDescription)] ||
                    statsList[ indexOf( solidityDescription)])
            {    
                stats.nVox = 0;
                stats.area = 0;
                stats.volume = 0;
                for ( int i = 0; i < contours.size(); i++ )
                {
                    int nVox = contours.elementAt(i).getNumVoxels();
                    stats.nVox += nVox;
                    stats.area += nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[1]);
                    stats.volume += nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[1] * fileInfo.getResolutions()[2]);
                }
                statProperty.setProperty(VOIStatisticList.areaDescription, nf.format(stats.area));
                statProperty.setProperty(VOIStatisticList.volumeDescription, nf.format(stats.volume));
                statProperty.setProperty(VOIStatisticList.quantityDescription, nf.format(stats.nVox));        
            }
            // If user selects perimeterDescription or circularityDescription:
            if ( statsList[ indexOf( perimeterDescription ) ] || statsList [ indexOf (circularityDescription) ])
            {           
                stats.perimeter = 0;
                for ( int i = 0; i < contours.size(); i++ )
                {                   
                    stats.perimeter += contours.elementAt(i).getLengthPtToPt(srcImage.getFileInfo(0).getResolutions());
                }
                statProperty.setProperty(VOIStatisticList.perimeterDescription, nf.format(stats.perimeter));  
            }
            
            if ( statsList[indexOf(circularityDescription)]) {
                stats.circularity = (4.0 * Math.PI * stats.area)/(stats.perimeter * stats.perimeter);
                statProperty.setProperty(VOIStatisticList.circularityDescription + end, nf.format(stats.circularity));
            }
            
            if ( statsList[indexOf(solidityDescription)]) {
                VOI convexKVOI = (VOI)kVOI.clone();
                for ( int i = 0; i < convexKVOI.getCurves().size(); i++) {
                    ((VOIContour)convexKVOI.getCurves().elementAt(i)).convexHull();
                }
                
                ContourStats convexStats = new ContourStats();
                
                BitSet convexMask = new BitSet( xDim * yDim * zDim );
                convexKVOI.createBinaryMask3D(convexMask, xDim, yDim, false, false);
                
                if(rangeFlag != RangeType.NO_RANGE && rangeFlag != null) { //some intensity values need to be ignored in relevant calculations
                
                    float fVal = 0.0f;   
                    for (int i = convexMask.nextSetBit(0); i >= 0; i = convexMask.nextSetBit(i+1)) {
                        fVal = srcImage.getFloat(i);
                        if (MipavUtil.inRange(ignoreMin, ignoreMax, fVal, rangeFlag)) {
                           convexMask.set(i, false); 
                        }
                    }
                }
                
                convexStats.nVox = convexMask.cardinality();

                convexStats.area = convexStats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[1]);
                stats.solidity = stats.area/convexStats.area;
                statProperty.setProperty(VOIStatisticList.solidityDescription, nf.format(stats.solidity));
            }
            
            if (statsList[indexOf(numberOfIndentationsDescription)]) {
                stats.numberOfIndentations = contour.findVOIIndentations2D(srcImage, iSlice, null, false); 
                statProperty.setProperty(VOIStatisticList.numberOfIndentationsDescription + end, nf.format(stats.numberOfIndentations));
            }
            
            if (statsList[indexOf(meanCurvatureDescription)] ||
                    statsList[indexOf(stdDevCurvatureDescription)] ||
                    statsList[indexOf(meanNegativeCurvatureDescription)]) {
                Vector<Vector3f> positions = new Vector<Vector3f>();
                Vector<Float> curvature = new Vector<Float>();

                double meanCurvature[] = new double[1];
                double stdDevCurvature[] = new double[1];
                double meanNegativeCurvature[] = new double[1];
                boolean smooth = true;
                VOIBase convexContour = new VOIContour((VOIContour)contour);
                convexContour.findPositionAndCurvature( srcImage, positions, curvature, smooth, meanCurvature, stdDevCurvature,
                                                        meanNegativeCurvature);
                if (statsList[indexOf(meanCurvatureDescription)]) {
                    stats.meanCurvature = meanCurvature[0];
                    statProperty.setProperty(VOIStatisticList.meanCurvatureDescription + end, nf.format(stats.meanCurvature));    
                }
                if (statsList[indexOf(stdDevCurvatureDescription)]) {
                    stats.stdDevCurvature = stdDevCurvature[0];
                    statProperty.setProperty(VOIStatisticList.stdDevCurvatureDescription + end, nf.format(stats.stdDevCurvature));    
                }
                if (statsList[indexOf(meanNegativeCurvatureDescription)]) {
                    stats.meanNegativeCurvature = meanNegativeCurvature[0];
                    statProperty.setProperty(VOIStatisticList.meanNegativeCurvatureDescription + end,
                                             nf.format(stats.meanNegativeCurvature));    
                }
            }

            
            // The following statistics are derived from the minIntensity, maxIntensity, avgIntensity, and sumIntensity:
            // median, mode, modeCount 
            // deviationDescription, skewnessDescription, kurtosisDescription, massCenterDescription
            if ( statsList[ indexOf( minIntensity ) ] ||
                    statsList[ indexOf( maxIntensity ) ] ||
                    statsList[ indexOf( avgIntensity ) ] ||
                    statsList[ indexOf( sumIntensities ) ] ||   

                    statsList[ indexOf( median ) ] || 
                    statsList[ indexOf( mode ) ] || 
                    statsList[ indexOf( modeCount ) ] ||

                    statsList[ indexOf( deviationDescription ) ] ||
                    statsList[ indexOf( skewnessDescription ) ] || 
                    statsList[ indexOf( kurtosisDescription ) ] ||
                    statsList[ indexOf( massCenterDescription ) ]  )
            {                   

                stats.nVox = 0;      
                stats.values = new Vector<Float>();
                stats.valuesRGB = new Vector<ColorRGB>();
                for ( int i = 0; i < contours.size(); i++ )
                {
                    int nVox = contours.elementAt(i).getNumVoxels();
                    stats.nVox += nVox;       
                    if (srcImage.isColorImage()) {
                        ColorRGB kMin = new ColorRGB();
                        ColorRGB kMax = new ColorRGB();
                        ColorRGB kSum = new ColorRGB();

                        stats.valuesRGB.addAll( contours.elementAt(i).calcRGBIntensity( srcImage, kMin, kMax, kSum,
                                ignoreMin, ignoreMax, rangeFlag ) );
                        if ( i == 0 )
                        {
                            stats.minIntenRed = kMin.R;
                            stats.minIntenGreen = kMin.G;
                            stats.minIntenBlue = kMin.B;

                            stats.maxIntenRed = kMax.R;
                            stats.maxIntenGreen = kMax.G;
                            stats.maxIntenBlue = kMax.B;
                        }

                        stats.minIntenRed = Math.min( stats.minIntenRed, kMin.R );
                        stats.minIntenGreen = Math.min( stats.minIntenGreen, kMin.G );
                        stats.minIntenBlue = Math.min( stats.minIntenBlue, kMin.B );

                        stats.maxIntenRed = Math.max( stats.minIntenRed, kMax.R );
                        stats.maxIntenGreen = Math.max( stats.minIntenGreen, kMax.G );
                        stats.maxIntenBlue = Math.max( stats.minIntenBlue, kMax.B );

                        stats.sumR += kSum.R;
                        stats.sumG += kSum.G;
                        stats.sumB += kSum.B;           
                    }
                    else
                    {
                        Vector3f kMinMax = new Vector3f();
                        stats.values.addAll( contours.elementAt(i).calcIntensity( srcImage, kMinMax, ignoreMin, ignoreMax, rangeFlag ) );
                        if ( i == 0 )
                        {
                            stats.minIntensity = kMinMax.X;
                            stats.maxIntensity = kMinMax.Y; 
                        }

                        stats.minIntensity = Math.min( stats.minIntensity, kMinMax.X );
                        stats.maxIntensity = Math.max( stats.maxIntensity, kMinMax.Y );
                        stats.sum += kMinMax.Z;

                    }
                }      

                statProperty.setProperty(VOIStatisticList.quantityDescription, nf.format(stats.nVox));
                if (srcImage.isColorImage()) {

                    stats.avgIntenR = stats.sumR/stats.nVox;
                    stats.avgIntenG = stats.sumG/stats.nVox;
                    stats.avgIntenB = stats.sumB/stats.nVox;
                    statProperty.setProperty(VOIStatisticList.minIntensity + "Red", nf.format(stats.minIntenRed));
                    statProperty.setProperty(VOIStatisticList.maxIntensity + "Red", nf.format(stats.maxIntenRed));
                    statProperty.setProperty(VOIStatisticList.minIntensity + "Green", nf.format(stats.minIntenGreen));
                    statProperty.setProperty(VOIStatisticList.maxIntensity + "Green", nf.format(stats.maxIntenGreen));
                    statProperty.setProperty(VOIStatisticList.minIntensity + "Blue", nf.format(stats.minIntenBlue));
                    statProperty.setProperty(VOIStatisticList.maxIntensity + "Blue", nf.format(stats.maxIntenBlue));
                    statProperty.setProperty(VOIStatisticList.avgIntensity + "Red", nf.format(stats.avgIntenR));
                    statProperty.setProperty(VOIStatisticList.avgIntensity + "Green", nf.format(stats.avgIntenG));
                    statProperty.setProperty(VOIStatisticList.avgIntensity + "Blue", nf.format(stats.avgIntenB));
                    statProperty.setProperty(VOIStatisticList.sumIntensities + "Red", nf.format(stats.sumR));
                    statProperty.setProperty(VOIStatisticList.sumIntensities + "Green", nf.format(stats.sumG));
                    statProperty.setProperty(VOIStatisticList.sumIntensities + "Blue", nf.format(stats.sumB));
                }
                else
                {
                    stats.avgInten = stats.sum/stats.nVox;
                    statProperty.setProperty(VOIStatisticList.minIntensity, nf.format(stats.minIntensity));
                    statProperty.setProperty(VOIStatisticList.maxIntensity, nf.format(stats.maxIntensity));
                    statProperty.setProperty(VOIStatisticList.avgIntensity, nf.format(stats.avgInten));
                    statProperty.setProperty(VOIStatisticList.sumIntensities, nf.format(stats.sum));
                }

                // median, mode, modeCount 
                if ( statsList[ indexOf( median ) ] || statsList[ indexOf( mode ) ] || statsList[ indexOf( modeCount ) ] )
                {               
                    if (srcImage.isColorImage()) {
                        getMedianStatisticsRGB( stats );

                        statProperty.setProperty(VOIStatisticList.mode + "Red", nf.format(stats.modeR));
                        statProperty.setProperty(VOIStatisticList.mode + "Green", nf.format(stats.modeG));
                        statProperty.setProperty(VOIStatisticList.mode + "Blue", nf.format(stats.modeB));

                        statProperty.setProperty(VOIStatisticList.modeCount + "Red", nf.format(stats.maxCountR));
                        statProperty.setProperty(VOIStatisticList.modeCount + "Green", nf.format(stats.maxCountG));
                        statProperty.setProperty(VOIStatisticList.modeCount + "Blue", nf.format(stats.maxCountB));

                        statProperty.setProperty(VOIStatisticList.median + "Red", nf.format(stats.medianR));
                        statProperty.setProperty(VOIStatisticList.median + "Green", nf.format(stats.medianG));
                        statProperty.setProperty(VOIStatisticList.median + "Blue", nf.format(stats.medianB));
                    }
                    else
                    {
                        getMedianStatistics( stats );
                        statProperty.setProperty(VOIStatisticList.mode, nf.format(stats.mode));
                        statProperty.setProperty(VOIStatisticList.modeCount, nf.format(stats.maxCount));
                        statProperty.setProperty(VOIStatisticList.median, nf.format(stats.median));
                    }
                }

                // deviationDescription, skewnessDescription, kurtosisDescription, massCenterDescription
                if ( statsList[ indexOf( deviationDescription ) ] ||
                        statsList[ indexOf( skewnessDescription ) ] || 
                        statsList[ indexOf( kurtosisDescription ) ] ||
                        statsList[ indexOf( massCenterDescription ) ]    )
                {       
                    Vector<Vector3f> kPositions = new Vector<Vector3f>();
                    for ( int i = 0; i < contours.size(); i++ )
                    {
                        kPositions.addAll( contours.elementAt(i).getMaskPositions() );
                    }
                    if (srcImage.isColorImage())
                    {
                        getStdSkewStatisticsRGB(stats, kPositions, 
                                unit2DStr, unit3DStr, ignoreMin, ignoreMax);

                        statProperty.setProperty(VOIStatisticList.deviationDescription + "Red", nf.format(stats.stdDevR));
                        statProperty.setProperty(VOIStatisticList.deviationDescription + "Green", nf.format(stats.stdDevG));
                        statProperty.setProperty(VOIStatisticList.deviationDescription + "Blue", nf.format(stats.stdDevB));
                        statProperty.setProperty(VOIStatisticList.skewnessDescription + "Red", nf.format(stats.skewnessR));
                        statProperty.setProperty(VOIStatisticList.skewnessDescription + "Green", nf.format(stats.skewnessG));
                        statProperty.setProperty(VOIStatisticList.skewnessDescription + "Blue", nf.format(stats.skewnessB));
                        statProperty.setProperty(VOIStatisticList.kurtosisDescription + "Red", nf.format(stats.kurtosisR));
                        statProperty.setProperty(VOIStatisticList.kurtosisDescription + "Green", nf.format(stats.kurtosisG));
                        statProperty.setProperty(VOIStatisticList.kurtosisDescription + "Blue", nf.format(stats.kurtosisB));
                        statProperty.setProperty(VOIStatisticList.massCenterDescription + "Red", stats.massCenterDescriptionR);
                        statProperty.setProperty(VOIStatisticList.massCenterDescription + "Green", stats.massCenterDescriptionG);
                        statProperty.setProperty(VOIStatisticList.massCenterDescription + "Blue", stats.massCenterDescriptionB);
                    }
                    else
                    {                        
                        getStdSkewStatistics(stats, kPositions, 
                                unit2DStr, unit3DStr, ignoreMin, ignoreMax);

                        statProperty.setProperty(VOIStatisticList.deviationDescription, nf.format(stats.stdDev));
                        statProperty.setProperty(VOIStatisticList.skewnessDescription, nf.format(stats.skewness));
                        statProperty.setProperty(VOIStatisticList.kurtosisDescription , nf.format(stats.kurtosis));
                        statProperty.setProperty(VOIStatisticList.massCenterDescription, stats.massCenterDescription);
                    }
                }

            }
            // If user selects geometricCenterDescription
            if ( statsList[ indexOf( geometricCenterDescription ) ] )
            {               
                Vector3f selectedCOM = calcSelectedVOI.getGeometricCenter();
                selectedCOM.X *= srcImage.getFileInfo(0).getResolutions()[0];
                selectedCOM.Y *= srcImage.getFileInfo(0).getResolutions()[1];
                String unitStr = unit2DStr + "\tZ";

                if (srcImage.getNDims() > 2) {
                    selectedCOM.Z *= srcImage.getFileInfo(0).getResolutions()[2];
                    unitStr = unit3DStr;
                }

                String comStr = unitStr + "\n\t\t" + nf.format(selectedCOM.X) + "\t" + nf.format(selectedCOM.Y) + "\t" +
                nf.format(selectedCOM.Z);
                comStr = addScannerLabels(comStr, selectedCOM);
                stats.gCenterString = new String(comStr);
                statProperty.setProperty(VOIStatisticList.geometricCenterDescription, stats.gCenterString);
            }
            // If user selects largestSliceDistanceDescription:
            if ( statsList[ indexOf( largestSliceDistanceDescription ) ] )
            {               
                for ( int i = 0; i < contours.size(); i++ )
                {
                    Vector3f kPos1 = new Vector3f();
                    Vector3f kPos2 = new Vector3f();
                    if ( i == 0 )
                    {
                        stats.largestContourDistance = ((VOIContour) (contours.elementAt(i))).calcLargestSliceDistance(
                                fileInfo.getResolutions()[0], fileInfo.getResolutions()[1], kPos1, kPos2);


                        // Uncomment the following to at the VOILine to the image:
                        //VOILine kLine = new VOILine();
                        //kLine.add(kPos1);
                        //kLine.add(kPos2);
                        //VOI kVOI = new VOI( (short)srcImage.getVOIs().size(), "LargestDist", VOI.LINE, 0 );
                        //kVOI.importCurve(kLine);
                        //srcImage.registerVOI(kVOI);
                    }
                    else
                    {
                        stats.largestContourDistance = Math.max( stats.largestContourDistance, 
                                ((VOIContour) (contours.elementAt(i))).calcLargestSliceDistance(
                                        fileInfo.getResolutions()[0], fileInfo.getResolutions()[1], kPos1, kPos2));

                        // Uncomment the following to at the VOILine to the image:
                        //VOILine kLine = new VOILine();
                        //kLine.add(kPos1);
                        //kLine.add(kPos2);
                        //VOI kVOI = new VOI( (short)srcImage.getVOIs().size(), "LargestDist", VOI.LINE, 0  );
                        //kVOI.importCurve(kLine);
                        //srcImage.registerVOI(kVOI);
                    }
                }
                statProperty.setProperty(VOIStatisticList.largestSliceDistanceDescription, nf.format(stats.largestContourDistance));
            }
            if ( statsList[ indexOf( largestDistanceDescription ) ] )
            {               
                stats.largestContourDistance = largestDistance;
                statProperty.setProperty(VOIStatisticList.largestDistanceDescription, nf.format(stats.largestContourDistance));
            }
            // Ellipsoid fit parameters are calculated as a group, if one is selected, calculate all.
            // For the VOI, only calculate these parameters for one contour:
            if ( statsList[ indexOf( axisDescription ) ] ||
                    statsList[ indexOf( eccentricityDescription ) ] ||
                    statsList[ indexOf( majorAxisDescription ) ] ||
                    statsList[ indexOf( minorAxisDescription ) ] )
            {               
                float[] tmpPAxis = new float[1];
                float[] tmpEcc = new float[1];
                float[] tmpMajorAxis = new float[1];
                float[] tmpMinorAxis = new float[1];
                ((VOIContour)contours.firstElement()).secondOrderAttributes(srcImage,
                        tmpPAxis, tmpEcc, tmpMajorAxis,
                        tmpMinorAxis);
                stats.PAxis = tmpPAxis[0];
                stats.Ecc = tmpEcc[0];
                stats.MajorAxis = tmpMajorAxis[0];
                stats.MinorAxis = tmpMinorAxis[0];
                System.out.println("HERE2");
                
                statProperty.setProperty(VOIStatisticList.axisDescription, nf.format(stats.PAxis));
                statProperty.setProperty(VOIStatisticList.eccentricityDescription, nf.format(stats.Ecc));
                statProperty.setProperty(VOIStatisticList.majorAxisDescription, nf.format(stats.MajorAxis));
                statProperty.setProperty(VOIStatisticList.minorAxisDescription, nf.format(stats.MinorAxis));
            }
        }
         */
        
        private void calcStatsTotal( VOI kVOI, VOIStatisticalProperties statProperty,
                FileInfoBase fileInfo, 
                String unit2DStr, String unit3DStr, float ignoreMin, float ignoreMax )
        {
            ContourStats stats = new ContourStats();
            int orientation = kVOI.getCurves().get(0).getPlane();

            int xDim = srcImage.getExtents().length > 0 ? srcImage.getExtents()[0] : 1;
            int yDim = srcImage.getExtents().length > 1 ? srcImage.getExtents()[1] : 1;
            int zDim = srcImage.getExtents().length > 2 ? srcImage.getExtents()[2] : 1;
            
            BitSet mask = new BitSet( xDim * yDim * zDim );
            kVOI.createBinaryMask3D(mask, xDim, yDim, false, false);
            
            if(rangeFlag != RangeType.NO_RANGE && rangeFlag != null) { //some intensity values need to be ignored in relevant calculations
            
                float fVal = 0.0f;   
                for (int i = mask.nextSetBit(0); i >= 0; i = mask.nextSetBit(i+1)) {
                    fVal = srcImage.getFloat(i);
                    if (MipavUtil.inRange(ignoreMin, ignoreMax, fVal, rangeFlag)) {
                       mask.set(i, false); 
                    }
                }
            }
            
            double largestDistance = 0;
            if(distanceFlag) {
                largestDistance = calcSelectedVOI.calcLargestDistance( mask, srcImage.getExtents(),
                        srcImage.getFileInfo(0).getResolutions());
            }

            stats.nVox = mask.cardinality();

            //System.err.println( "calcStatsTotal " );
            
            
            // The following depend on each other: quantityDescription, volumeDescription, areaDescription,
            // circularityDescription, solidityDescription
            // If one is selected, all are calculated.
            if ( statsList[ indexOf( quantityDescription ) ] || 
                    statsList[ indexOf( volumeDescription ) ] ||
                    statsList[ indexOf( areaDescription ) ] ||
                    statsList[ indexOf( circularityDescription)] ||
                    statsList[ indexOf( solidityDescription)])
            { 
            	if (orientation == VOIBase.ZPLANE) {
                    stats.area = stats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[1]);
                    stats.volume = stats.area * fileInfo.getResolutions()[2]; 
                }
                else if (orientation == VOIBase.XPLANE) {
                	stats.area = stats.nVox * (fileInfo.getResolutions()[1] * fileInfo.getResolutions()[2]);
                    stats.volume = stats.area * fileInfo.getResolutions()[0]; 
                }
                else {
                	stats.area = stats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[2]);
                    stats.volume = stats.area * fileInfo.getResolutions()[1]; 
                }
                
                statProperty.setProperty(VOIStatisticList.areaDescription, nf.format(stats.area));
                statProperty.setProperty(VOIStatisticList.volumeDescription, nf.format(stats.volume));
                statProperty.setProperty(VOIStatisticList.quantityDescription, nf.format(stats.nVox));        
            }
            // If user selects perimeterDescription or circularityDescription:
            if ( statsList[ indexOf( perimeterDescription ) ] || statsList[ indexOf(circularityDescription)])
            {           
                stats.perimeter = 0;
                for ( int i = 0; i < kVOI.getCurves().size(); i++ )
                {                   
                    stats.perimeter += kVOI.getCurves().elementAt(i).getLengthPtToPt(srcImage.getFileInfo(0).getResolutions());
                }
                statProperty.setProperty(VOIStatisticList.perimeterDescription, nf.format(stats.perimeter));  
            }
            
            if ( statsList[indexOf(circularityDescription)]) {
                stats.circularity = (4.0 * Math.PI * stats.area)/(stats.perimeter * stats.perimeter);
                statProperty.setProperty(VOIStatisticList.circularityDescription, nf.format(stats.circularity));
            }
            
            if ( statsList[indexOf(solidityDescription)]) {
                VOI convexKVOI = new VOI(kVOI);
                for ( int i = 0; i < convexKVOI.getCurves().size(); i++) {
                    ((VOIContour)convexKVOI.getCurves().elementAt(i)).convexHull();
                }
                
                ContourStats convexStats = new ContourStats();
                
                BitSet convexMask = new BitSet( xDim * yDim * zDim );
                convexKVOI.createBinaryMask3D(convexMask, xDim, yDim, false, false);
                
                if(rangeFlag != RangeType.NO_RANGE && rangeFlag != null) { //some intensity values need to be ignored in relevant calculations
                
                    float fVal = 0.0f;   
                    for (int i = convexMask.nextSetBit(0); i >= 0; i = convexMask.nextSetBit(i+1)) {
                        fVal = srcImage.getFloat(i);
                        if (MipavUtil.inRange(ignoreMin, ignoreMax, fVal, rangeFlag)) {
                           convexMask.set(i, false); 
                           System.out.println("Setting false");
                        }
                    }
                }
                
                convexStats.nVox = convexMask.cardinality();

                if (orientation == VOIBase.ZPLANE) {
                    stats.hullArea = convexStats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[1]);
                }
                else if (orientation == VOIBase.XPLANE) {
                	stats.hullArea = convexStats.nVox * (fileInfo.getResolutions()[1] * fileInfo.getResolutions()[2]);	
                }
                else {
                	stats.hullArea = convexStats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[2]);		
                }
                stats.solidity = stats.area/stats.hullArea;
                statProperty.setProperty(VOIStatisticList.solidityDescription, nf.format(stats.solidity));
            }
            
            if (statsList[indexOf(numberOfIndentationsCurvatureDescription)]) {
                Vector<Vector3f> positions = new Vector<Vector3f>();
                Vector<Float> curvature = new Vector<Float>();

                double meanCurvature[] = new double[1];
                double stdDevCurvature[] = new double[1];
                double meanNegativeCurvature[] = new double[1];
                int numberOfIndentations[] = new int[1];
                double totalLength[] = new double[1];
                stats.numberOfIndentationsCurvature = 0;
                for (int i = 0; i < kVOI.getCurves().size(); i++) {
                    kVOI.getCurves().elementAt(i).findPositionAndCurvature(positions, curvature, smoothCurvature, meanCurvature, stdDevCurvature,
                                                        meanNegativeCurvature, negativeHysteresisFraction,
                                                        positiveHysteresisFraction, numberOfIndentations,
                                                        consecutiveNegativeNeeded, negativeCurvatureNeeded,
                                                        totalLength);
                    stats.numberOfIndentationsCurvature += numberOfIndentations[0];
                }
                statProperty.setProperty(VOIStatisticList.numberOfIndentationsCurvatureDescription, nf.format(stats.numberOfIndentationsCurvature)); 
            }
            
            if ( statsList[ indexOf( numberOfIndentationsHullDescription ) ] )
            {           
                stats.numberOfIndentationsHull = 0;
                for ( int i = 0; i < kVOI.getCurves().size(); i++ )
                {   int sliceNum = Math.round(kVOI.getCurves().elementAt(i).elementAt(0).Z);                
                    stats.numberOfIndentationsHull += kVOI.getCurves().elementAt(i).findVOIIndentations2D(srcImage, sliceNum, null, false);
                }
                statProperty.setProperty(VOIStatisticList.numberOfIndentationsHullDescription, nf.format(stats.numberOfIndentationsHull));  
            }
            
            // The following statistics are derived from the minIntensity, maxIntensity, avgIntensity, and sumIntensity:
            // median, mode, modeCount 
            // deviationDescription, skewnessDescription, kurtosisDescription, massCenterDescription
            if ( statsList[ indexOf( minIntensity ) ] ||
                    statsList[ indexOf( maxIntensity ) ] ||
                    statsList[ indexOf( avgIntensity ) ] ||
                    statsList[ indexOf( sumIntensities ) ] ||   

                    statsList[ indexOf( median ) ] || 
                    statsList[ indexOf( mode ) ] || 
                    statsList[ indexOf( modeCount ) ] ||

                    statsList[ indexOf( deviationDescription ) ] ||
                    statsList[ indexOf( skewnessDescription ) ] || 
                    statsList[ indexOf( kurtosisDescription ) ] ||
                    statsList[ indexOf( massCenterDescription ) ]  )
            {                   
                stats.values = new Vector<Float>();
                for ( int i = 0; i < kVOI.getCurves().size(); i++ )
                {     
                    
                    Vector3f kMinMax = new Vector3f();
                    stats.values.addAll( kVOI.getCurves().elementAt(i).calcIntensity( srcImage, kMinMax, ignoreMin, ignoreMax, rangeFlag ) );
                    if ( i == 0 )
                    {
                        stats.minIntensity = kMinMax.X;
                        stats.maxIntensity = kMinMax.Y; 
                    }

                    stats.minIntensity = Math.min( stats.minIntensity, kMinMax.X );
                    stats.maxIntensity = Math.max( stats.maxIntensity, kMinMax.Y );
                    stats.sum += kMinMax.Z;

                }      

                statProperty.setProperty(VOIStatisticList.quantityDescription, nf.format(stats.nVox));
                
                if(stats.nVox != 0) {
                    stats.avgInten = stats.sum/stats.nVox;
                } else {
                    stats.avgInten = 0;
                }
                statProperty.setProperty(VOIStatisticList.minIntensity, nf.format(stats.minIntensity));
                statProperty.setProperty(VOIStatisticList.maxIntensity, nf.format(stats.maxIntensity));
                statProperty.setProperty(VOIStatisticList.avgIntensity, nf.format(stats.avgInten));
                statProperty.setProperty(VOIStatisticList.sumIntensities, nf.format(stats.sum));

                // median, mode, modeCount 
                if ( statsList[ indexOf( median ) ] || statsList[ indexOf( mode ) ] || statsList[ indexOf( modeCount ) ] )
                {               
                    
                    getMedianStatistics( stats );
                    statProperty.setProperty(VOIStatisticList.mode, nf.format(stats.mode));
                    statProperty.setProperty(VOIStatisticList.modeCount, nf.format(stats.maxCount));
                    statProperty.setProperty(VOIStatisticList.median, nf.format(stats.median));
                }

                // deviationDescription, skewnessDescription, kurtosisDescription, massCenterDescription
                if ( statsList[ indexOf( deviationDescription ) ] ||
                        statsList[ indexOf( skewnessDescription ) ] || 
                        statsList[ indexOf( kurtosisDescription ) ] ||
                        statsList[ indexOf( massCenterDescription ) ]    )
                {       
                    Vector<Vector3f> kPositions = new Vector<Vector3f>();
                    for ( int i = 0; i < kVOI.getCurves().size(); i++ )
                    {
                        kPositions.addAll( kVOI.getCurves().elementAt(i).getMaskPositions() );
                    }
                        
                    getStdSkewStatistics(stats, kPositions, 
                            unit2DStr, unit3DStr, ignoreMin, ignoreMax);

                    statProperty.setProperty(VOIStatisticList.deviationDescription, nf.format(stats.stdDev));
                    statProperty.setProperty(VOIStatisticList.skewnessDescription, nf.format(stats.skewness));
                    statProperty.setProperty(VOIStatisticList.kurtosisDescription , nf.format(stats.kurtosis));
                    statProperty.setProperty(VOIStatisticList.massCenterDescription, stats.massCenterDescription);
                }

            }
            // If user selects geometricCenterDescription
            if ( statsList[ indexOf( geometricCenterDescription ) ] )
            {               
                Vector3f selectedCOM = calcSelectedVOI.getGeometricCenter();
                selectedCOM.X *= srcImage.getFileInfo(0).getResolutions()[0];
                selectedCOM.Y *= srcImage.getFileInfo(0).getResolutions()[1];
                String unitStr = unit2DStr + "\tZ";

                if (srcImage.getNDims() > 2) {
                    selectedCOM.Z *= srcImage.getFileInfo(0).getResolutions()[2];
                    unitStr = unit3DStr;
                }

                String comStr = unitStr + "\n\t\t" + nf.format(selectedCOM.X) + "\t" + nf.format(selectedCOM.Y) + "\t" +
                nf.format(selectedCOM.Z);
                comStr = addScannerLabels(comStr, selectedCOM);
                stats.gCenterString = new String(comStr);
                statProperty.setProperty(VOIStatisticList.geometricCenterDescription, stats.gCenterString);
            }
            // If user selects largestSliceDistanceDescription:
            if ( statsList[ indexOf( largestSliceDistanceDescription ) ] )
            {               
                for ( int i = 0; i < kVOI.getCurves().size(); i++ )
                {
                    Vector3f kPos1 = new Vector3f();
                    Vector3f kPos2 = new Vector3f();
                    if ( i == 0 )
                    {
                        stats.largestContourDistance = ((VOIContour) (kVOI.getCurves().elementAt(i))).calcLargestSliceDistance(srcImage.getExtents(),
                                fileInfo.getResolutions(), kPos1, kPos2);


                        // Uncomment the following to at the VOILine to the image:
                        //VOILine kLine = new VOILine();
                        //kLine.add(kPos1);
                        //kLine.add(kPos2);
                        //VOI kVOI = new VOI( (short)srcImage.getVOIs().size(), "LargestDist", VOI.LINE, 0 );
                        //kVOI.importCurve(kLine);
                        //srcImage.registerVOI(kVOI);
                    }
                    else
                    {
                        stats.largestContourDistance = Math.max( stats.largestContourDistance, 
                                ((VOIContour) (kVOI.getCurves().elementAt(i))).calcLargestSliceDistance( srcImage.getExtents(),
                                        fileInfo.getResolutions(), kPos1, kPos2));

                        // Uncomment the following to at the VOILine to the image:
                        //VOILine kLine = new VOILine();
                        //kLine.add(kPos1);
                        //kLine.add(kPos2);
                        //VOI kVOI = new VOI( (short)srcImage.getVOIs().size(), "LargestDist", VOI.LINE, 0  );
                        //kVOI.importCurve(kLine);
                        //srcImage.registerVOI(kVOI);
                    }
                }
                statProperty.setProperty(VOIStatisticList.largestSliceDistanceDescription, nf.format(stats.largestContourDistance));
            }
            if ( statsList[ indexOf( largestDistanceDescription ) ] )
            {               
                stats.largestContourDistance = largestDistance;
                statProperty.setProperty(VOIStatisticList.largestDistanceDescription, nf.format(stats.largestContourDistance));
            }
            // Ellipsoid fit parameters are calculated as a group, if one is selected, calculate all.
            // For the VOI, only calculate these parameters for one contour:
            if ( statsList[ indexOf( eccentricityDescription ) ] ||
                    statsList[ indexOf( majorAxisDescription ) ] ||
                    statsList[ indexOf( minorAxisDescription ) ] )
            {               
                float[] tmpPAxis = new float[1];
                float[] tmpEcc = new float[1];
                float[] tmpMajorAxis = new float[1];
                float[] tmpMinorAxis = new float[1];
                ((VOIContour)kVOI.getCurves().firstElement()).secondOrderAttributes(srcImage,
                        tmpPAxis, tmpEcc, tmpMajorAxis,
                        tmpMinorAxis);
                stats.Ecc = tmpEcc[0];
                stats.MajorAxis = tmpMajorAxis[0];
                stats.MinorAxis = tmpMinorAxis[0];
                
                statProperty.setProperty(VOIStatisticList.eccentricityDescription, nf.format(stats.Ecc));
                statProperty.setProperty(VOIStatisticList.majorAxisDescription, nf.format(stats.MajorAxis));
                statProperty.setProperty(VOIStatisticList.minorAxisDescription, nf.format(stats.MinorAxis));
            }
        
            if (statsList[ indexOf(axisDescription)]) {
                stats.PAxis = ((VOIContour)kVOI.getCurves().firstElement()).principalAxis(srcImage.getExtents()[0], srcImage.getExtents()[1]);
                statProperty.setProperty(VOIStatisticList.axisDescription, nf.format(stats.PAxis));
            }
        }
        
        private void calcStatsTotalRGB( VOI kVOI, VOIStatisticalProperties statProperty,
                FileInfoBase fileInfo, 
                String unit2DStr, String unit3DStr, float ignoreMinR, float ignoreMaxR,
                float ignoreMinG, float ignoreMaxG, float ignoreMinB, float ignoreMaxB)
        {
            ContourStats stats = new ContourStats();
            int orientation = kVOI.getCurves().get(0).getPlane();

            int xDim = srcImage.getExtents().length > 0 ? srcImage.getExtents()[0] : 1;
            int yDim = srcImage.getExtents().length > 1 ? srcImage.getExtents()[1] : 1;
            int zDim = srcImage.getExtents().length > 2 ? srcImage.getExtents()[2] : 1;
            
            BitSet mask = new BitSet( xDim * yDim * zDim );
            kVOI.createBinaryMask3D(mask, xDim, yDim, false, false);
            
            if(rangeFlag != RangeType.NO_RANGE && rangeFlag != null) { //some intensity values need to be ignored in relevant calculations
            
                float fValR = 0.0f; 
                float fValG = 0.0f;
                float fValB = 0.0f;
                for (int i = mask.nextSetBit(0); i >= 0; i = mask.nextSetBit(i+1)) {
                    fValR = srcImage.getFloat(4*i+1);
                    fValG = srcImage.getFloat(4*i+2);
                    fValB = srcImage.getFloat(4*i+3);
                    if ((MipavUtil.inRange(ignoreMinR, ignoreMaxR, fValR, rangeFlag)) ||
                        (MipavUtil.inRange(ignoreMinG, ignoreMaxG, fValG, rangeFlag)) ||
                        (MipavUtil.inRange(ignoreMinB, ignoreMaxB, fValB, rangeFlag))) {
                       mask.set(i, false); 
                    }
                }
            }
            
            double largestDistance = 0;
            if(distanceFlag) {
                largestDistance = calcSelectedVOI.calcLargestDistance( mask, srcImage.getExtents(),
                        srcImage.getFileInfo(0).getResolutions());
            }

            stats.nVox = mask.cardinality();

            //System.err.println( "calcStatsTotal " );
            
            
            // The following depend on each other: quantityDescription, volumeDescription, areaDescription,
            // circularityDescription, solidityDescription
            // If one is selected, all are calculated.
            if ( statsList[ indexOf( quantityDescription ) ] || 
                    statsList[ indexOf( volumeDescription ) ] ||
                    statsList[ indexOf( areaDescription ) ] ||
                    statsList[ indexOf( circularityDescription)] ||
                    statsList[ indexOf( solidityDescription)])
            {    
            	if (orientation == VOIBase.ZPLANE) {
                    stats.area = stats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[1]);
                    stats.volume = stats.area * fileInfo.getResolutions()[2]; 
                }
                else if (orientation == VOIBase.XPLANE) {
                	stats.area = stats.nVox * (fileInfo.getResolutions()[1] * fileInfo.getResolutions()[2]);
                    stats.volume = stats.area * fileInfo.getResolutions()[0]; 	
                }
                else {
                	stats.area = stats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[2]);
                    stats.volume = stats.area * fileInfo.getResolutions()[1]; 		
                }
                
                statProperty.setProperty(VOIStatisticList.areaDescription, nf.format(stats.area));
                statProperty.setProperty(VOIStatisticList.volumeDescription, nf.format(stats.volume));
                statProperty.setProperty(VOIStatisticList.quantityDescription, nf.format(stats.nVox));        
            }
            // If user selects perimeterDescription or circularityDescription:
            if ( statsList[ indexOf( perimeterDescription ) ] || statsList[ indexOf( circularityDescription)])
            {           
                stats.perimeter = 0;
                for ( int i = 0; i < kVOI.getCurves().size(); i++ )
                {                   
                    stats.perimeter += kVOI.getCurves().elementAt(i).getLengthPtToPt(srcImage.getFileInfo(0).getResolutions());
                }
                statProperty.setProperty(VOIStatisticList.perimeterDescription, nf.format(stats.perimeter));  
            }
            
            if ( statsList[indexOf(circularityDescription)]) {
                stats.circularity = (4.0 * Math.PI * stats.area)/(stats.perimeter * stats.perimeter);
                statProperty.setProperty(VOIStatisticList.circularityDescription, nf.format(stats.circularity));
            }
            
            if ( statsList[indexOf(solidityDescription)]) {
                VOI convexKVOI = new VOI(kVOI);
                for ( int i = 0; i < convexKVOI.getCurves().size(); i++) {
                    ((VOIContour)convexKVOI.getCurves().elementAt(i)).convexHull();
                }
                
                ContourStats convexStats = new ContourStats();
                
                BitSet convexMask = new BitSet( xDim * yDim * zDim );
                convexKVOI.createBinaryMask3D(convexMask, xDim, yDim, false, false);
                
                if(rangeFlag != RangeType.NO_RANGE && rangeFlag != null) { //some intensity values need to be ignored in relevant calculations
                    
                    float fValR = 0.0f; 
                    float fValG = 0.0f;
                    float fValB = 0.0f;
                    for (int i = convexMask.nextSetBit(0); i >= 0; i = convexMask.nextSetBit(i+1)) {
                        fValR = srcImage.getFloat(4*i+1);
                        fValG = srcImage.getFloat(4*i+2);
                        fValB = srcImage.getFloat(4*i+3);
                        if ((MipavUtil.inRange(ignoreMinR, ignoreMaxR, fValR, rangeFlag)) ||
                            (MipavUtil.inRange(ignoreMinG, ignoreMaxG, fValG, rangeFlag)) ||
                            (MipavUtil.inRange(ignoreMinB, ignoreMaxB, fValB, rangeFlag))) {
                           convexMask.set(i, false); 
                        }
                    }
                }
                
                convexStats.nVox = convexMask.cardinality();

                if (orientation == VOIBase.ZPLANE) {
                    stats.hullArea = convexStats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[1]);
                }
                else if (orientation == VOIBase.XPLANE) {
                	stats.hullArea = convexStats.nVox * (fileInfo.getResolutions()[1] * fileInfo.getResolutions()[2]);	
                }
                else {
                	stats.hullArea = convexStats.nVox * (fileInfo.getResolutions()[0] * fileInfo.getResolutions()[2]);		
                }
                stats.solidity = stats.area/stats.hullArea;
                statProperty.setProperty(VOIStatisticList.solidityDescription, nf.format(stats.solidity));
            }
            
            if (statsList[indexOf(numberOfIndentationsCurvatureDescription)]) {
                Vector<Vector3f> positions = new Vector<Vector3f>();
                Vector<Float> curvature = new Vector<Float>();

                double meanCurvature[] = new double[1];
                double stdDevCurvature[] = new double[1];
                double meanNegativeCurvature[] = new double[1];
                int numberOfIndentations[] = new int[1];
                double totalLength[] = new double[1];
                stats.numberOfIndentationsCurvature = 0;
                for (int i = 0; i < kVOI.getCurves().size(); i++) {
                    kVOI.getCurves().elementAt(i).findPositionAndCurvature(positions, curvature, smoothCurvature, meanCurvature, stdDevCurvature,
                                                        meanNegativeCurvature, negativeHysteresisFraction,
                                                        positiveHysteresisFraction, numberOfIndentations,
                                                        consecutiveNegativeNeeded, negativeCurvatureNeeded,
                                                        totalLength);
                    stats.numberOfIndentationsCurvature += numberOfIndentations[0];
                }
                statProperty.setProperty(VOIStatisticList.numberOfIndentationsCurvatureDescription, nf.format(stats.numberOfIndentationsCurvature)); 
            }
            
            if ( statsList[ indexOf( numberOfIndentationsHullDescription ) ] )
            {           
                stats.numberOfIndentationsHull = 0;
                for ( int i = 0; i < kVOI.getCurves().size(); i++ )
                {   int sliceNum = Math.round(kVOI.getCurves().elementAt(i).elementAt(0).Z);                
                    stats.numberOfIndentationsHull += kVOI.getCurves().elementAt(i).findVOIIndentations2D(srcImage, sliceNum, null, false);
                }
                statProperty.setProperty(VOIStatisticList.numberOfIndentationsHullDescription, nf.format(stats.numberOfIndentationsHull));  
            }
            
            // The following statistics are derived from the minIntensity, maxIntensity, avgIntensity, and sumIntensity:
            // median, mode, modeCount 
            // deviationDescription, skewnessDescription, kurtosisDescription, massCenterDescription
            if ( statsList[ indexOf( minIntensity ) ] ||
                    statsList[ indexOf( maxIntensity ) ] ||
                    statsList[ indexOf( avgIntensity ) ] ||
                    statsList[ indexOf( sumIntensities ) ] ||   

                    statsList[ indexOf( median ) ] || 
                    statsList[ indexOf( mode ) ] || 
                    statsList[ indexOf( modeCount ) ] ||

                    statsList[ indexOf( deviationDescription ) ] ||
                    statsList[ indexOf( skewnessDescription ) ] || 
                    statsList[ indexOf( kurtosisDescription ) ] ||
                    statsList[ indexOf( massCenterDescription ) ]  )
            {                   
                stats.valuesRGB = new Vector<ColorRGB>();
                for ( int i = 0; i < kVOI.getCurves().size(); i++ )
                {     
                        ColorRGB kMin = new ColorRGB();
                        ColorRGB kMax = new ColorRGB();
                        ColorRGB kSum = new ColorRGB();

                        stats.valuesRGB.addAll( kVOI.getCurves().elementAt(i).calcRGBIntensity( srcImage, kMin, kMax, kSum,
                                ignoreMinR, ignoreMaxR, ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB, rangeFlag ) );
                        if ( i == 0 )
                        {
                            stats.minIntenRed = kMin.R;
                            stats.minIntenGreen = kMin.G;
                            stats.minIntenBlue = kMin.B;

                            stats.maxIntenRed = kMax.R;
                            stats.maxIntenGreen = kMax.G;
                            stats.maxIntenBlue = kMax.B;
                        }

                        stats.minIntenRed = Math.min( stats.minIntenRed, kMin.R );
                        stats.minIntenGreen = Math.min( stats.minIntenGreen, kMin.G );
                        stats.minIntenBlue = Math.min( stats.minIntenBlue, kMin.B );

                        stats.maxIntenRed = Math.max( stats.minIntenRed, kMax.R );
                        stats.maxIntenGreen = Math.max( stats.minIntenGreen, kMax.G );
                        stats.maxIntenBlue = Math.max( stats.minIntenBlue, kMax.B );

                        stats.sumR += kSum.R;
                        stats.sumG += kSum.G;
                        stats.sumB += kSum.B;           
                   
                }      

                statProperty.setProperty(VOIStatisticList.quantityDescription, nf.format(stats.nVox));

                if(stats.nVox != 0) {
                    stats.avgIntenR = stats.sumR/stats.nVox;
                    stats.avgIntenG = stats.sumG/stats.nVox;
                    stats.avgIntenB = stats.sumB/stats.nVox;
                } else {
                    stats.avgIntenR = 0;
                    stats.avgIntenG = 0;
                    stats.avgIntenB = 0;
                }
                
                statProperty.setProperty(VOIStatisticList.minIntensity + "Red", nf.format(stats.minIntenRed));
                statProperty.setProperty(VOIStatisticList.maxIntensity + "Red", nf.format(stats.maxIntenRed));
                statProperty.setProperty(VOIStatisticList.minIntensity + "Green", nf.format(stats.minIntenGreen));
                statProperty.setProperty(VOIStatisticList.maxIntensity + "Green", nf.format(stats.maxIntenGreen));
                statProperty.setProperty(VOIStatisticList.minIntensity + "Blue", nf.format(stats.minIntenBlue));
                statProperty.setProperty(VOIStatisticList.maxIntensity + "Blue", nf.format(stats.maxIntenBlue));
                statProperty.setProperty(VOIStatisticList.avgIntensity + "Red", nf.format(stats.avgIntenR));
                statProperty.setProperty(VOIStatisticList.avgIntensity + "Green", nf.format(stats.avgIntenG));
                statProperty.setProperty(VOIStatisticList.avgIntensity + "Blue", nf.format(stats.avgIntenB));
                statProperty.setProperty(VOIStatisticList.sumIntensities + "Red", nf.format(stats.sumR));
                statProperty.setProperty(VOIStatisticList.sumIntensities + "Green", nf.format(stats.sumG));
                statProperty.setProperty(VOIStatisticList.sumIntensities + "Blue", nf.format(stats.sumB));
                

                // median, mode, modeCount 
                if ( statsList[ indexOf( median ) ] || statsList[ indexOf( mode ) ] || statsList[ indexOf( modeCount ) ] )
                {               
                    getMedianStatisticsRGB( stats );

                    statProperty.setProperty(VOIStatisticList.mode + "Red", nf.format(stats.modeR));
                    statProperty.setProperty(VOIStatisticList.mode + "Green", nf.format(stats.modeG));
                    statProperty.setProperty(VOIStatisticList.mode + "Blue", nf.format(stats.modeB));

                    statProperty.setProperty(VOIStatisticList.modeCount + "Red", nf.format(stats.maxCountR));
                    statProperty.setProperty(VOIStatisticList.modeCount + "Green", nf.format(stats.maxCountG));
                    statProperty.setProperty(VOIStatisticList.modeCount + "Blue", nf.format(stats.maxCountB));

                    statProperty.setProperty(VOIStatisticList.median + "Red", nf.format(stats.medianR));
                    statProperty.setProperty(VOIStatisticList.median + "Green", nf.format(stats.medianG));
                    statProperty.setProperty(VOIStatisticList.median + "Blue", nf.format(stats.medianB));
                }

                // deviationDescription, skewnessDescription, kurtosisDescription, massCenterDescription
                if ( statsList[ indexOf( deviationDescription ) ] ||
                        statsList[ indexOf( skewnessDescription ) ] || 
                        statsList[ indexOf( kurtosisDescription ) ] ||
                        statsList[ indexOf( massCenterDescription ) ]    )
                {       
                    Vector<Vector3f> kPositions = new Vector<Vector3f>();
                    for ( int i = 0; i < kVOI.getCurves().size(); i++ )
                    {
                        kPositions.addAll( kVOI.getCurves().elementAt(i).getMaskPositions() );
                    }
                    
                    getStdSkewStatisticsRGB(stats, kPositions, 
                            unit2DStr, unit3DStr, ignoreMinR, ignoreMaxR, ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB);

                    statProperty.setProperty(VOIStatisticList.deviationDescription + "Red", nf.format(stats.stdDevR));
                    statProperty.setProperty(VOIStatisticList.deviationDescription + "Green", nf.format(stats.stdDevG));
                    statProperty.setProperty(VOIStatisticList.deviationDescription + "Blue", nf.format(stats.stdDevB));
                    statProperty.setProperty(VOIStatisticList.skewnessDescription + "Red", nf.format(stats.skewnessR));
                    statProperty.setProperty(VOIStatisticList.skewnessDescription + "Green", nf.format(stats.skewnessG));
                    statProperty.setProperty(VOIStatisticList.skewnessDescription + "Blue", nf.format(stats.skewnessB));
                    statProperty.setProperty(VOIStatisticList.kurtosisDescription + "Red", nf.format(stats.kurtosisR));
                    statProperty.setProperty(VOIStatisticList.kurtosisDescription + "Green", nf.format(stats.kurtosisG));
                    statProperty.setProperty(VOIStatisticList.kurtosisDescription + "Blue", nf.format(stats.kurtosisB));
                    statProperty.setProperty(VOIStatisticList.massCenterDescription + "Red", stats.massCenterDescriptionR);
                    statProperty.setProperty(VOIStatisticList.massCenterDescription + "Green", stats.massCenterDescriptionG);
                    statProperty.setProperty(VOIStatisticList.massCenterDescription + "Blue", stats.massCenterDescriptionB);
                    
                }

            }
            // If user selects geometricCenterDescription
            if ( statsList[ indexOf( geometricCenterDescription ) ] )
            {               
                Vector3f selectedCOM = calcSelectedVOI.getGeometricCenter();
                selectedCOM.X *= srcImage.getFileInfo(0).getResolutions()[0];
                selectedCOM.Y *= srcImage.getFileInfo(0).getResolutions()[1];
                String unitStr = unit2DStr + "\tZ";

                if (srcImage.getNDims() > 2) {
                    selectedCOM.Z *= srcImage.getFileInfo(0).getResolutions()[2];
                    unitStr = unit3DStr;
                }

                String comStr = unitStr + "\n\t\t" + nf.format(selectedCOM.X) + "\t" + nf.format(selectedCOM.Y) + "\t" +
                nf.format(selectedCOM.Z);
                comStr = addScannerLabels(comStr, selectedCOM);
                stats.gCenterString = new String(comStr);
                statProperty.setProperty(VOIStatisticList.geometricCenterDescription, stats.gCenterString);
            }
            // If user selects largestSliceDistanceDescription:
            if ( statsList[ indexOf( largestSliceDistanceDescription ) ] )
            {               
                for ( int i = 0; i < kVOI.getCurves().size(); i++ )
                {
                    Vector3f kPos1 = new Vector3f();
                    Vector3f kPos2 = new Vector3f();
                    if ( i == 0 )
                    {
                        stats.largestContourDistance = ((VOIContour) (kVOI.getCurves().elementAt(i))).calcLargestSliceDistance(srcImage.getExtents(),
                                fileInfo.getResolutions(), kPos1, kPos2);


                        // Uncomment the following to at the VOILine to the image:
                        //VOILine kLine = new VOILine();
                        //kLine.add(kPos1);
                        //kLine.add(kPos2);
                        //VOI kVOI = new VOI( (short)srcImage.getVOIs().size(), "LargestDist", VOI.LINE, 0 );
                        //kVOI.importCurve(kLine);
                        //srcImage.registerVOI(kVOI);
                    }
                    else
                    {
                        stats.largestContourDistance = Math.max( stats.largestContourDistance, 
                                ((VOIContour) (kVOI.getCurves().elementAt(i))).calcLargestSliceDistance( srcImage.getExtents(),
                                        fileInfo.getResolutions(), kPos1, kPos2));

                        // Uncomment the following to at the VOILine to the image:
                        //VOILine kLine = new VOILine();
                        //kLine.add(kPos1);
                        //kLine.add(kPos2);
                        //VOI kVOI = new VOI( (short)srcImage.getVOIs().size(), "LargestDist", VOI.LINE, 0  );
                        //kVOI.importCurve(kLine);
                        //srcImage.registerVOI(kVOI);
                    }
                }
                statProperty.setProperty(VOIStatisticList.largestSliceDistanceDescription, nf.format(stats.largestContourDistance));
            }
            if ( statsList[ indexOf( largestDistanceDescription ) ] )
            {               
                stats.largestContourDistance = largestDistance;
                statProperty.setProperty(VOIStatisticList.largestDistanceDescription, nf.format(stats.largestContourDistance));
            }
            // Ellipsoid fit parameters are calculated as a group, if one is selected, calculate all.
            // For the VOI, only calculate these parameters for one contour:
            if ( statsList[ indexOf( eccentricityDescription ) ] ||
                    statsList[ indexOf( majorAxisDescription ) ] ||
                    statsList[ indexOf( minorAxisDescription ) ] )
            {               
                float[] tmpPAxis = new float[1];
                float[] tmpEcc = new float[1];
                float[] tmpMajorAxis = new float[1];
                float[] tmpMinorAxis = new float[1];
                ((VOIContour)kVOI.getCurves().firstElement()).secondOrderAttributes(srcImage,
                        tmpPAxis, tmpEcc, tmpMajorAxis,
                        tmpMinorAxis);
                stats.Ecc = tmpEcc[0];
                stats.MajorAxis = tmpMajorAxis[0];
                stats.MinorAxis = tmpMinorAxis[0];
                
                statProperty.setProperty(VOIStatisticList.eccentricityDescription, nf.format(stats.Ecc));
                statProperty.setProperty(VOIStatisticList.majorAxisDescription, nf.format(stats.MajorAxis));
                statProperty.setProperty(VOIStatisticList.minorAxisDescription, nf.format(stats.MinorAxis));
            }
            
            if (statsList[ indexOf(axisDescription)]) {
                stats.PAxis = ((VOIContour)kVOI.getCurves().firstElement()).principalAxis(srcImage.getExtents()[0], srcImage.getExtents()[1]);
                statProperty.setProperty(VOIStatisticList.axisDescription, nf.format(stats.PAxis));
            }
        }

        /**
         * Sums the statistics for a group of contours, where the statistics are first calculated per-contour.
         * @param stats array of per-contour statistics
         * @param statProperty output is written to the statProperty
         * @param unit2DStr 2D label string
         * @param unit3DStr 3D label string
         * @param end tag for statProperty labels
         * @param ignoreMin threshold minimum
         * @param ignoreMax threshold maximum
         * @param largestDistance VOI largest distance.
         */
        private void printTotals(ContourStats[] stats, VOIStatisticalProperties statProperty, 
                String unit2DStr, String unit3DStr, String end, float ignoreMin, float ignoreMax,
                double largestDistance)
        {            
            //System.err.println( "printTotals "  + end );
            double xRes = srcImage.getFileInfo(0).getResolutions().length > 0 ? srcImage.getFileInfo(0).getResolutions()[0] : 1;
            double yRes = srcImage.getFileInfo(0).getResolutions().length > 1 ? srcImage.getFileInfo(0).getResolutions()[1] : 1;
            double zRes = srcImage.getFileInfo(0).getResolutions().length > 2 ? srcImage.getFileInfo(0).getResolutions()[2] : 1;

            ContourStats statsTotal = new ContourStats();

            if ( statsList[ indexOf( quantityDescription ) ] || 
                    statsList[ indexOf( volumeDescription ) ] ||
                    statsList[ indexOf( areaDescription ) ] ||
                    statsList[ indexOf( circularityDescription)] ||
                    statsList[ indexOf( solidityDescription)])
            {               
                for (int q = 0; q < stats.length; q++) {
                    statsTotal.nVox += stats[q].nVox;
                    statsTotal.area += stats[q].area;
                    statsTotal.volume += stats[q].volume;
                }
                statProperty.setProperty(VOIStatisticList.areaDescription + end, nf.format(statsTotal.area));
                statProperty.setProperty(VOIStatisticList.volumeDescription + end, nf.format(statsTotal.volume));
                statProperty.setProperty(VOIStatisticList.quantityDescription + end, nf.format(statsTotal.nVox));
            }
            if ( statsList[ indexOf( perimeterDescription ) ] || statsList[ indexOf( circularityDescription)])
            {            
                for (int q = 0; q < stats.length; q++) {
                    statsTotal.perimeter += stats[q].perimeter;
                }                      
                statProperty.setProperty(VOIStatisticList.perimeterDescription + end, nf.format(statsTotal.perimeter));
            }
            
            if ( statsList[indexOf(circularityDescription)]) {
                statsTotal.circularity = (4.0 * Math.PI * statsTotal.area)/(statsTotal.perimeter * statsTotal.perimeter);
                statProperty.setProperty(VOIStatisticList.circularityDescription + end, nf.format(statsTotal.circularity));
            }
            
            if (statsList[ indexOf( solidityDescription)]) {
                for (int q = 0; q < stats.length; q++) {
                    statsTotal.hullArea += stats[q].hullArea;
                }
                statsTotal.solidity = statsTotal.area/statsTotal.hullArea;
                statProperty.setProperty(VOIStatisticList.solidityDescription + end, nf.format(statsTotal.solidity));
            }
            
            if (statsList[ indexOf( numberOfIndentationsCurvatureDescription)]) {
                for (int q = 0; q < stats.length; q++) {
                    statsTotal.numberOfIndentationsCurvature += stats[q].numberOfIndentationsCurvature;
                }
             
                statProperty.setProperty(VOIStatisticList.numberOfIndentationsCurvatureDescription + end, 
                        nf.format(statsTotal.numberOfIndentationsCurvature));
            }
            
            if (statsList[ indexOf( numberOfIndentationsHullDescription)]) {
                for (int q = 0; q < stats.length; q++) {
                    statsTotal.numberOfIndentationsHull += stats[q].numberOfIndentationsHull;
                }
             
                statProperty.setProperty(VOIStatisticList.numberOfIndentationsHullDescription + end, nf.format(statsTotal.numberOfIndentationsHull));
            }
            
            if ( statsList[ indexOf( minIntensity ) ] ||
                    statsList[ indexOf( maxIntensity ) ] ||
                    statsList[ indexOf( avgIntensity ) ] ||
                    statsList[ indexOf( sumIntensities ) ] ||   

                    statsList[ indexOf( median ) ] || 
                    statsList[ indexOf( mode ) ] || 
                    statsList[ indexOf( modeCount ) ] ||

                    statsList[ indexOf( deviationDescription ) ] ||
                    statsList[ indexOf( skewnessDescription ) ] || 
                    statsList[ indexOf( kurtosisDescription ) ] ||
                    statsList[ indexOf( massCenterDescription ) ]  )
            {                   

                statsTotal.nVox = 0;      
                statsTotal.values = new Vector<Float>();
                for (int q = 0; q < stats.length; q++) {
                    statsTotal.nVox += stats[q].nVox;       
                    
                    statsTotal.values.addAll( stats[q].values );
                    if ( q == 0 )
                    {
                        statsTotal.minIntensity = stats[q].minIntensity;
                        statsTotal.maxIntensity = stats[q].maxIntensity; 
                    }

                    statsTotal.minIntensity = Math.min( statsTotal.minIntensity, stats[q].minIntensity );
                    statsTotal.maxIntensity = Math.max( statsTotal.maxIntensity, stats[q].maxIntensity );
                    statsTotal.sum += stats[q].sum;

                }      

                statProperty.setProperty(VOIStatisticList.quantityDescription + end, nf.format(statsTotal.nVox));
                
                statsTotal.avgInten = statsTotal.sum/statsTotal.nVox;
                statProperty.setProperty(VOIStatisticList.minIntensity + end, nf.format(statsTotal.minIntensity));
                statProperty.setProperty(VOIStatisticList.maxIntensity + end, nf.format(statsTotal.maxIntensity));
                statProperty.setProperty(VOIStatisticList.avgIntensity + end, nf.format(statsTotal.avgInten));
                statProperty.setProperty(VOIStatisticList.sumIntensities + end, nf.format(statsTotal.sum));

                if ( statsList[ indexOf( median ) ] || statsList[ indexOf( mode ) ] || statsList[ indexOf( modeCount ) ] )
                {               
                    
                    getMedianStatistics( statsTotal );
                    statProperty.setProperty(VOIStatisticList.mode + end, nf.format(statsTotal.mode));
                    statProperty.setProperty(VOIStatisticList.modeCount + end, nf.format(statsTotal.maxCount));
                    statProperty.setProperty(VOIStatisticList.median + end, nf.format(statsTotal.median));
                }

                if ( statsList[ indexOf( deviationDescription ) ] ||
                        statsList[ indexOf( skewnessDescription ) ] || 
                        statsList[ indexOf( kurtosisDescription ) ] ||
                        statsList[ indexOf( massCenterDescription ) ]    )
                {       

                    statsTotal.maskPositions = new Vector<Vector3f>();
                    for (int q = 0; q < stats.length; q++)
                    {
                        statsTotal.maskPositions.addAll( stats[q].maskPositions );
                    }
                         
                    getStdSkewStatistics(statsTotal, statsTotal.maskPositions, 
                            unit2DStr, unit3DStr, ignoreMin, ignoreMax);

                    statProperty.setProperty(VOIStatisticList.deviationDescription + end, nf.format(statsTotal.stdDev));
                    statProperty.setProperty(VOIStatisticList.skewnessDescription + end, nf.format(statsTotal.skewness));
                    statProperty.setProperty(VOIStatisticList.kurtosisDescription + end, nf.format(statsTotal.kurtosis));
                    statProperty.setProperty(VOIStatisticList.massCenterDescription + end, statsTotal.massCenterDescription);
                }
            }
            if ( statsList[ indexOf( geometricCenterDescription ) ] )
            {               
                Vector3f totalC = calcSelectedVOI.getGeometricCenter();
                totalC.X *= xRes;
                totalC.Y *= yRes;
                totalC.Z *= zRes;
                String unitStr = unit2DStr + "\tZ";

                String comStr = unitStr + "\n\t\t" + nf.format(totalC.X) + "\t" + nf.format(totalC.Y) + "\t" + nf.format(totalC.Z);
                comStr = addScannerLabels(comStr, totalC);
                statProperty.setProperty(VOIStatisticList.geometricCenterDescription + end, comStr);                
            }

            if ( statsList[ indexOf( eccentricityDescription ) ] ||
                    statsList[ indexOf( majorAxisDescription ) ] ||
                    statsList[ indexOf( minorAxisDescription ) ] )
            {            
                
                statProperty.setProperty(VOIStatisticList.eccentricityDescription + end, nf.format(stats[0].Ecc));
                statProperty.setProperty(VOIStatisticList.majorAxisDescription + end, nf.format(stats[0].MajorAxis));
                statProperty.setProperty(VOIStatisticList.minorAxisDescription + end, nf.format(stats[0].MinorAxis));                
            }
            
            if (statsList[ indexOf(axisDescription)]) {
                statProperty.setProperty(VOIStatisticList.axisDescription + end, nf.format(stats[0].PAxis));    
            }
            if ( statsList[ indexOf( largestSliceDistanceDescription ) ] )
            {             
                double largestAllSlicesDistance = 0;
                for (int q = 0; q < stats.length; q++) {
                    largestAllSlicesDistance = Math.max( largestAllSlicesDistance, stats[q].largestContourDistance);
                }
                statProperty.setProperty(VOIStatisticList.largestSliceDistanceDescription + end, nf.format(largestAllSlicesDistance));
            }

            if ( statsList[ indexOf( largestDistanceDescription ) ] )
            {             
                statProperty.setProperty(VOIStatisticList.largestDistanceDescription + end, nf.format(largestDistance));
            }
        }
        
        /**
         * Sums the statistics for a group of contours, where the statistics are first calculated per-contour.
         * @param stats array of per-contour statistics
         * @param statProperty output is written to the statProperty
         * @param unit2DStr 2D label string
         * @param unit3DStr 3D label string
         * @param end tag for statProperty labels
         * @param ignoreMinR threshold minimum red
         * @param ignoreMaxR threshold maximum red
         * @param ignoreMinG threshold minimum green
         * @param ignoreMaxG threshold maximum green
         * @param ignoreMinB threshold minimum blue
         * @param ignoreMaxB threshold maximum blue
         * @param largestDistance VOI largest distance.
         */
        private void printTotalsRGB(ContourStats[] stats, VOIStatisticalProperties statProperty, 
                String unit2DStr, String unit3DStr, String end, float ignoreMinR, float ignoreMaxR,
                float ignoreMinG, float ignoreMaxG, float ignoreMinB, float ignoreMaxB, double largestDistance)
        {            
            //System.err.println( "printTotals "  + end );
            double xRes = srcImage.getFileInfo(0).getResolutions().length > 0 ? srcImage.getFileInfo(0).getResolutions()[0] : 1;
            double yRes = srcImage.getFileInfo(0).getResolutions().length > 1 ? srcImage.getFileInfo(0).getResolutions()[1] : 1;
            double zRes = srcImage.getFileInfo(0).getResolutions().length > 2 ? srcImage.getFileInfo(0).getResolutions()[2] : 1;

            ContourStats statsTotal = new ContourStats();

            if ( statsList[ indexOf( quantityDescription ) ] || 
                    statsList[ indexOf( volumeDescription ) ] ||
                    statsList[ indexOf( areaDescription ) ] ||
                    statsList[ indexOf (circularityDescription)] ||
                    statsList[ indexOf (solidityDescription)])
            {               
                for (int q = 0; q < stats.length; q++) {
                    statsTotal.nVox += stats[q].nVox;
                    statsTotal.area += stats[q].area;
                    statsTotal.volume += stats[q].volume;
                }
                statProperty.setProperty(VOIStatisticList.areaDescription + end, nf.format(statsTotal.area));
                statProperty.setProperty(VOIStatisticList.volumeDescription + end, nf.format(statsTotal.volume));
                statProperty.setProperty(VOIStatisticList.quantityDescription + end, nf.format(statsTotal.nVox));
            }
            if ( statsList[ indexOf( perimeterDescription ) ] || statsList[ indexOf( circularityDescription)])
            {            
                for (int q = 0; q < stats.length; q++) {
                    statsTotal.perimeter += stats[q].perimeter;
                }                      
                statProperty.setProperty(VOIStatisticList.perimeterDescription + end, nf.format(statsTotal.perimeter));
            }
            
            if ( statsList[indexOf(circularityDescription)]) {
                statsTotal.circularity = (4.0 * Math.PI * statsTotal.area)/(statsTotal.perimeter * statsTotal.perimeter);
                statProperty.setProperty(VOIStatisticList.circularityDescription + end, nf.format(statsTotal.circularity));
            }
            
            if (statsList[ indexOf( solidityDescription)]) {
                for (int q = 0; q < stats.length; q++) {
                    statsTotal.hullArea += stats[q].hullArea;
                }
                statsTotal.solidity = statsTotal.area/statsTotal.hullArea;
                statProperty.setProperty(VOIStatisticList.solidityDescription + end, nf.format(statsTotal.solidity));
            }
            
            if (statsList[ indexOf( numberOfIndentationsCurvatureDescription)]) {
                for (int q = 0; q < stats.length; q++) {
                    statsTotal.numberOfIndentationsCurvature += stats[q].numberOfIndentationsCurvature;
                }
             
                statProperty.setProperty(VOIStatisticList.numberOfIndentationsCurvatureDescription + end, 
                        nf.format(statsTotal.numberOfIndentationsCurvature));
            }
            
            if (statsList[ indexOf( numberOfIndentationsHullDescription)]) {
                for (int q = 0; q < stats.length; q++) {
                    statsTotal.numberOfIndentationsHull += stats[q].numberOfIndentationsHull;
                }
             
                statProperty.setProperty(VOIStatisticList.numberOfIndentationsHullDescription + end, 
                        nf.format(statsTotal.numberOfIndentationsHull));
            }
            
            if ( statsList[ indexOf( minIntensity ) ] ||
                    statsList[ indexOf( maxIntensity ) ] ||
                    statsList[ indexOf( avgIntensity ) ] ||
                    statsList[ indexOf( sumIntensities ) ] ||   

                    statsList[ indexOf( median ) ] || 
                    statsList[ indexOf( mode ) ] || 
                    statsList[ indexOf( modeCount ) ] ||

                    statsList[ indexOf( deviationDescription ) ] ||
                    statsList[ indexOf( skewnessDescription ) ] || 
                    statsList[ indexOf( kurtosisDescription ) ] ||
                    statsList[ indexOf( massCenterDescription ) ]  )
            {                   

                statsTotal.nVox = 0;      
                statsTotal.valuesRGB = new Vector<ColorRGB>();
                for (int q = 0; q < stats.length; q++) {
                    statsTotal.nVox += stats[q].nVox;       
                    statsTotal.valuesRGB.addAll( stats[q].valuesRGB );
                    if ( q == 0 )
                    {
                        statsTotal.minIntenRed = stats[q].minIntenRed;
                        statsTotal.minIntenGreen = stats[q].minIntenGreen;
                        statsTotal.minIntenBlue = stats[q].minIntenBlue;

                        statsTotal.maxIntenRed = stats[q].maxIntenRed;
                        statsTotal.maxIntenGreen = stats[q].maxIntenGreen;
                        statsTotal.maxIntenBlue = stats[q].maxIntenBlue;
                    }

                    statsTotal.minIntenRed = Math.min( statsTotal.minIntenRed, stats[q].minIntenRed );
                    statsTotal.minIntenGreen = Math.min( statsTotal.minIntenGreen, stats[q].minIntenGreen );
                    statsTotal.minIntenBlue = Math.min( statsTotal.minIntenBlue, stats[q].minIntenBlue );

                    statsTotal.maxIntenRed = Math.max( statsTotal.minIntenRed, stats[q].maxIntenRed );
                    statsTotal.maxIntenGreen = Math.max( statsTotal.minIntenGreen, stats[q].maxIntenGreen );
                    statsTotal.maxIntenBlue = Math.max( statsTotal.minIntenBlue, stats[q].maxIntenBlue );

                    statsTotal.sumR += stats[q].sumR;
                    statsTotal.sumG += stats[q].sumG;
                    statsTotal.sumB += stats[q].sumB;           
                }      

                statProperty.setProperty(VOIStatisticList.quantityDescription + end, nf.format(statsTotal.nVox));

                statsTotal.avgIntenR = statsTotal.sumR/statsTotal.nVox;
                statsTotal.avgIntenG = statsTotal.sumG/statsTotal.nVox;
                statsTotal.avgIntenB = statsTotal.sumB/statsTotal.nVox;
                statProperty.setProperty(VOIStatisticList.minIntensity + "Red" + end, nf.format(statsTotal.minIntenRed));
                statProperty.setProperty(VOIStatisticList.maxIntensity + "Red" + end, nf.format(statsTotal.maxIntenRed));
                statProperty.setProperty(VOIStatisticList.minIntensity + "Green" + end, nf.format(statsTotal.minIntenGreen));
                statProperty.setProperty(VOIStatisticList.maxIntensity + "Green" + end, nf.format(statsTotal.maxIntenGreen));
                statProperty.setProperty(VOIStatisticList.minIntensity + "Blue" + end, nf.format(statsTotal.minIntenBlue));
                statProperty.setProperty(VOIStatisticList.maxIntensity + "Blue" + end, nf.format(statsTotal.maxIntenBlue));
                statProperty.setProperty(VOIStatisticList.avgIntensity + "Red" + end, nf.format(statsTotal.avgIntenR));
                statProperty.setProperty(VOIStatisticList.avgIntensity + "Green" + end, nf.format(statsTotal.avgIntenG));
                statProperty.setProperty(VOIStatisticList.avgIntensity + "Blue" + end, nf.format(statsTotal.avgIntenB));
                statProperty.setProperty(VOIStatisticList.sumIntensities + "Red" + end, nf.format(statsTotal.sumR));
                statProperty.setProperty(VOIStatisticList.sumIntensities + "Green" + end, nf.format(statsTotal.sumG));
                statProperty.setProperty(VOIStatisticList.sumIntensities + "Blue" + end, nf.format(statsTotal.sumB));

                if ( statsList[ indexOf( median ) ] || statsList[ indexOf( mode ) ] || statsList[ indexOf( modeCount ) ] )
                {               
                    getMedianStatisticsRGB( statsTotal );
                    statProperty.setProperty(VOIStatisticList.mode + "Red" + end, nf.format(statsTotal.modeR));
                    statProperty.setProperty(VOIStatisticList.mode + "Green" + end, nf.format(statsTotal.modeG));
                    statProperty.setProperty(VOIStatisticList.mode + "Blue" + end, nf.format(statsTotal.modeB));

                    statProperty.setProperty(VOIStatisticList.modeCount + "Red" + end, nf.format(statsTotal.maxCountR));
                    statProperty.setProperty(VOIStatisticList.modeCount + "Green" + end, nf.format(statsTotal.maxCountG));
                    statProperty.setProperty(VOIStatisticList.modeCount + "Blue" + end, nf.format(statsTotal.maxCountB));

                    statProperty.setProperty(VOIStatisticList.median + "Red" + end, nf.format(statsTotal.medianR));
                    statProperty.setProperty(VOIStatisticList.median + "Green" + end, nf.format(statsTotal.medianG));
                    statProperty.setProperty(VOIStatisticList.median + "Blue" + end, nf.format(statsTotal.medianB));
            }

                if ( statsList[ indexOf( deviationDescription ) ] ||
                        statsList[ indexOf( skewnessDescription ) ] || 
                        statsList[ indexOf( kurtosisDescription ) ] ||
                        statsList[ indexOf( massCenterDescription ) ]    )
                {       

                    statsTotal.maskPositions = new Vector<Vector3f>();
                    for (int q = 0; q < stats.length; q++)
                    {
                        statsTotal.maskPositions.addAll( stats[q].maskPositions );
                    }
     
                    getStdSkewStatisticsRGB(statsTotal, statsTotal.maskPositions, 
                            unit2DStr, unit3DStr, ignoreMinR, ignoreMaxR, ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB);

                    statProperty.setProperty(VOIStatisticList.deviationDescription + "Red" + end, nf.format(statsTotal.stdDevR));
                    statProperty.setProperty(VOIStatisticList.deviationDescription + "Green" + end, nf.format(statsTotal.stdDevG));
                    statProperty.setProperty(VOIStatisticList.deviationDescription + "Blue" + end, nf.format(statsTotal.stdDevB));
                    statProperty.setProperty(VOIStatisticList.skewnessDescription + "Red" + end, nf.format(statsTotal.skewnessR));
                    statProperty.setProperty(VOIStatisticList.skewnessDescription + "Green" + end, nf.format(statsTotal.skewnessG));
                    statProperty.setProperty(VOIStatisticList.skewnessDescription + "Blue" + end, nf.format(statsTotal.skewnessB));
                    statProperty.setProperty(VOIStatisticList.kurtosisDescription + "Red" + end, nf.format(statsTotal.kurtosisR));
                    statProperty.setProperty(VOIStatisticList.kurtosisDescription + "Green" + end, nf.format(statsTotal.kurtosisG));
                    statProperty.setProperty(VOIStatisticList.kurtosisDescription + "Blue" + end, nf.format(statsTotal.kurtosisB));
                    statProperty.setProperty(VOIStatisticList.massCenterDescription + "Red" + end, statsTotal.massCenterDescriptionR);
                    statProperty.setProperty(VOIStatisticList.massCenterDescription + "Green" + end, statsTotal.massCenterDescriptionG);
                    statProperty.setProperty(VOIStatisticList.massCenterDescription + "Blue" + end, statsTotal.massCenterDescriptionB);
                }
            }
            if ( statsList[ indexOf( geometricCenterDescription ) ] )
            {               
                Vector3f totalC = calcSelectedVOI.getGeometricCenter();
                totalC.X *= xRes;
                totalC.Y *= yRes;
                totalC.Z *= zRes;
                String unitStr = unit2DStr + "\tZ";

                String comStr = unitStr + "\n\t\t" + nf.format(totalC.X) + "\t" + nf.format(totalC.Y) + "\t" + nf.format(totalC.Z);
                comStr = addScannerLabels(comStr, totalC);
                statProperty.setProperty(VOIStatisticList.geometricCenterDescription + end, comStr);                
            }

            if ( statsList[ indexOf( eccentricityDescription ) ] ||
                    statsList[ indexOf( majorAxisDescription ) ] ||
                    statsList[ indexOf( minorAxisDescription ) ] )
            {            
                statProperty.setProperty(VOIStatisticList.eccentricityDescription + end, nf.format(stats[0].Ecc));
                statProperty.setProperty(VOIStatisticList.majorAxisDescription + end, nf.format(stats[0].MajorAxis));
                statProperty.setProperty(VOIStatisticList.minorAxisDescription + end, nf.format(stats[0].MinorAxis));                
            }
            
            if ( statsList[ indexOf( axisDescription ) ]) {
                statProperty.setProperty(VOIStatisticList.axisDescription + end, nf.format(stats[0].PAxis));
            }
            
            if ( statsList[ indexOf( largestSliceDistanceDescription ) ] )
            {             
                double largestAllSlicesDistance = 0;
                for (int q = 0; q < stats.length; q++) {
                    largestAllSlicesDistance = Math.max( largestAllSlicesDistance, stats[q].largestContourDistance);
                }
                statProperty.setProperty(VOIStatisticList.largestSliceDistanceDescription + end, nf.format(largestAllSlicesDistance));
            }

            if ( statsList[ indexOf( largestDistanceDescription ) ] )
            {             
                statProperty.setProperty(VOIStatisticList.largestDistanceDescription + end, nf.format(largestDistance));
            }
        }
        
        /**
         * Sums the statistics for a group of contours, where the statistics are first calculated per-contour.
         * @param allStats list of per-contour statistics
         * @param statProperty output is written to the statProperty
         * @param unit2DStr 2D label string
         * @param unit3DStr 3D label string
         * @param end tag for statProperty labels
         * @param ignoreMin threshold minimum
         * @param ignoreMax threshold maximum
         * @param largestDistance VOI largest distance.
         */
        private void printTotals(Vector<ContourStats> allStats, 
                VOIStatisticalProperties statProperty, 
                String unit2DStr, String unit3DStr, String end, float ignoreMin, float ignoreMax,
                double largestDistance   )
        {
            ContourStats[] stats = new ContourStats[allStats.size()];
            for ( int i = 0; i < stats.length; i++ )
            {
                stats[i] = allStats.elementAt(i);
            }
            printTotals( stats, statProperty, 
                    unit2DStr, unit3DStr, end, ignoreMin, ignoreMax, largestDistance );
        }
        
        /**
         * Sums the statistics for a group of contours, where the statistics are first calculated per-contour.
         * @param allStats list of per-contour statistics
         * @param statProperty output is written to the statProperty
         * @param unit2DStr 2D label string
         * @param unit3DStr 3D label string
         * @param end tag for statProperty labels
         * @param ignoreMinR threshold minimum red
         * @param ignoreMaxR threshold maximum red
         * @param ignoreMinG threshold minimum green
         * @param ignoreMaxG threshold maximum green
         * @param ignoreMinB threshold minimum blue
         * @param ignoreMaxB threshold maximum blue
         * @param largestDistance VOI largest distance.
         */
        private void printTotalsRGB(Vector<ContourStats> allStats, 
                VOIStatisticalProperties statProperty, 
                String unit2DStr, String unit3DStr, String end, float ignoreMinR, float ignoreMaxR,
                float ignoreMinG, float ignoreMaxG, float ignoreMinB, float ignoreMaxB,
                double largestDistance   )
        {
            ContourStats[] stats = new ContourStats[allStats.size()];
            for ( int i = 0; i < stats.length; i++ )
            {
                stats[i] = allStats.elementAt(i);
            }
            printTotalsRGB( stats, statProperty, 
                    unit2DStr, unit3DStr, end, ignoreMinR, ignoreMaxR, 
                    ignoreMinG, ignoreMaxG, ignoreMinB, ignoreMaxB, largestDistance );
        }
        
        


    }
    
    



    /** Algorithm sums all statistics for the entire VOI */
    public static final int PROCESS_PER_VOI = 0;

    /** Algorithm maintains separate statistics per contour and denotes the slice of each contour */
    public static final int PROCESS_PER_SLICE_AND_CONTOUR = 1;

    /** Algorithm sums all statistics from each contour on the same slice */
    public static final int PROCESS_PER_SLICE = 2;

    /** Algorithm maintains separate statistics per contour */
    public static final int PROCESS_PER_CONTOUR = 3;
    
    //~ Instance fields ------------------------------------------------------------------------------------------------
    
    /** The VOI on which to perform the calculations. */
    private VOI activeVOI;

    /** Formatting for float values into strings. */
    protected DecimalFormat nf;

    /** How the VOI calculations should be performed (entire, contour, slice). */
    protected int processType = PROCESS_PER_VOI;

    /** Vector to hold all properties calculated within the algorithm for later access. */
    protected Vector<VOIStatisticalProperties> propertyList;

    /**  Specifies how a range of pixels is excluded from VOI calculations. */
    protected RangeType rangeFlag = RangeType.NO_RANGE;

    /** Whether or not to calculate largest slice distance, true by default */
    protected boolean sliceDistanceFlag;

    /** Whether or not to calculate largest distance (only 3D), true by default */
    protected boolean distanceFlag;

    /** Vector of all VOIs that will have calculations performed. */
    protected ViewVOIVector selectedVOIset;

    /** Whether or not to show totals for each calculation. */
    protected boolean showTotals = false;

    /** Boolean for if the algorithm should ONLY check active contours */
    protected boolean doOnlyActiveContours = false;

    /**The top-level group of threads used for calculating. */
    private ThreadGroup calcGroup = new ThreadGroup("CalcVOI");

    //~ Constructors ---------------------------------------------------------------------------------------------------

    protected boolean[] statsList = new boolean[numberOfStatistics];

    /**
     * constructor. note that if there are no VOIs to act on, this constructor returns quietly.
     *
     * @param  srcImg     image model that contain the VOI
     * @param  pType      list of items to perform the statistics operations on
     * @param  rangeFlag  Whether the range of values specified by the statistics generator should be ignored
     * @param  voiSet     The VOIs that will be calculated
     */
    public AlgorithmVOIProps(ModelImage srcImg, int pType, RangeType rangeFlag, ViewVOIVector voiSet) {
        nf = new DecimalFormat();
        nf.setMaximumFractionDigits(4);
        nf.setMinimumFractionDigits(0);
        nf.setGroupingUsed(false);

        DecimalFormatSymbols dfs = nf.getDecimalFormatSymbols();
        dfs.setDecimalSeparator('.');
        nf.setDecimalFormatSymbols(dfs);

        this.rangeFlag = rangeFlag;
        this.sliceDistanceFlag = true;
        this.distanceFlag = true;
        this.srcImage = srcImg;
        this.processType = pType;

        if (srcImage.getNDims() == 2) {
            pType = PROCESS_PER_SLICE;
        }

        selectedVOIset = voiSet;

        if (selectedVOIset.size() == 0) {
            return;
        }

        // initial storage ....
        // this represents 1 vector for each contour/
        // can be more selected contours!!!!!!!!
        initialiseDataHolders(selectedVOIset.size());

        for ( int i = 0; i < numberOfStatistics; i++ )
        {
            statsList[i] = true;
        }
    }

    /**
     * constructor.
     *
     * @param  srcImg       image model that contain the VOI
     * @param  processType  perform the property calculations for each slice, rather than for whole volume of interest
     * @param  voiSet     The VOIs that will be calculated
     */
    public AlgorithmVOIProps(ModelImage srcImg, int processType, ViewVOIVector voiSet) {
        this(srcImg, processType, RangeType.NO_RANGE, voiSet);
    }

    //~ Methods --------------------------------------------------------------------------------------------------------

    /**
     * constructor. sets the source image of the algorithm, and presets the algorithm to calculate properties of 3D
     * images as a volume of interest, rather than by slice.
     *
     * @param  srcImg  image model that contain the VOI
     * @param  voiSet  The VOIs that will be calculated
     */
    public AlgorithmVOIProps(ModelImage srcImg, ViewVOIVector voiSet) {
        this(srcImg, PROCESS_PER_VOI, voiSet);
    }

    /**
     * Prepares this class for destruction.
     */
    public void finalize() {
        srcImage = null;
        super.finalize();
    }

    /**
     * Gets the area of the VOI; return area defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getArea() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.areaDescription)).floatValue();
    } // {return area;}

    /**
     * Gets the average intensity of the VOI return average intensity of image defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getAvgInten() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.avgIntensity)).floatValue();
    } // {return avgInten;}

    /**
     * Gets the average intensity of the Blue channel of VOI return average intensity of the Blue channel of image
     * defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getAvgIntenB() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.avgIntensity +
        "Blue")).floatValue();
    } // {return avgIntenB;}

    /**
     * Gets the average intensity of the Green channel of VOI return average intensity of the Green channel of image
     * defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getAvgIntenG() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.avgIntensity +
        "Green")).floatValue();
    } // {return avgIntenG;}



    /**
     * Gets the average intensity of the Red channel of VOI return average intensity of the Red channel of image defined
     * by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getAvgIntenR() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.avgIntensity +
        "Red")).floatValue();
    } // {return avgIntenR;}

    /**
     * Gets the the center of mass of the VOI ; return center of mass defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    //TODO: Should report results of all VOIs
    public String getCenterOfMass() {
        return propertyList.firstElement().getProperty(VOIStatisticList.massCenterDescription);
    } // {return cenMassPt;}

    /**
     * Gets the the blue center of mass of the VOI ; return blue center of mass defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public String getCenterOfMassB() {
        return propertyList.firstElement().getProperty(VOIStatisticList.massCenterDescription + "Blue");
    } // {return cenMassPtB;} 

    /**
     * Gets the the green center of mass of the VOI ; return green center of mass defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public String getCenterOfMassG() {
        return propertyList.firstElement().getProperty(VOIStatisticList.massCenterDescription + "Green");
    } // {return cenMassPtG;} 





    /**
     * Gets the the red center of mass of the VOI ; return red center of mass defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    //TODO: Should report results of all VOIs, etc.
    public String getCenterOfMassR() {
        return propertyList.firstElement().getProperty(VOIStatisticList.massCenterDescription + "Red");
    } // {return cenMassPtR;}

    /**
     * Gets the eccentricity of the VOI: 1 = line, 0 = circle; return eccentricity of the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getEccentricity() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.eccentricityDescription)).floatValue();
    } // {return eccentricity;}

    /**
     * Gets the the geometric center of the VOI ; return geometric center defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    //TODO: Should report results of all VOIs
    public String getGeometricCenter() {
        VOIStatisticalProperties p = propertyList.firstElement(); 
        return (p).getProperty(VOIStatisticList.geometricCenterDescription);
    } // {return gcPt;} 

    /**
     * Gets the coefficient of kurtosis of the pixel values in the VOI
     * @return
     */
    public float getKurtosis() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.kurtosisDescription)).floatValue();
    } 





    /**
     * Gets the coefficient of kurtosis of the blue pixel values in the VOI
     * @return
     */
    public float getKurtosisB() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.kurtosisDescription + "Blue")).floatValue();
    }

    /**
     * Gets the coefficient of kurtosis of the green pixel values in the VOI
     * @return
     */
    public float getKurtosisG() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.kurtosisDescription + "Green")).floatValue();
    }

    /**
     * Gets the coefficient of kurtosis of the red pixel values in the VOI
     * @return
     */
    public float getKurtosisR() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.kurtosisDescription + "Red")).floatValue();
    } 

    /**
     * Gets the largest line segment totally contained within a 3D VOI (in terms of res).
     * If this unexpectedly returns zero, make sure you have not inadvertently set distanceFlag to false.
     *
     * @return  String largest distance string
     */
    public String getLargestDistance() {
        return propertyList.firstElement().getProperty(VOIStatisticList.largestDistanceDescription);
    } // {return largestDistance;}






    /**
     * Gets the largest line segment totally contained within a VOI slice (in terms of res).
     * If this unexpectedly returns zero, make sure you have not inadvertently set sliceDistanceFlag to false.
     *
     * @return  String largest slice distance string
     */
    public String getLargestSliceDistance() {
        return propertyList.firstElement().getProperty(VOIStatisticList.largestSliceDistanceDescription);
    } // {return largestSliceDistance;}

    /**
     * Gets the major axis of VOI (only valid for 2D object); return major axis length of the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getMajorAxis() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.majorAxisDescription)).floatValue();
    } // {return majorAxis;}

    /**
     * Gets the maximum intensity of the VOI return average intensity of image defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getMaxIntensity() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.maxIntensity)).floatValue();
    } // {return maxIntensity;}

    /**
     * Gets the maximum intensity of the Blue channel for the VOI return average intensity of image defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getMaxIntensityBlue() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.maxIntensity +
        "Blue")).floatValue();
    } // {return maxIntenBlue;}

    /**
     * Gets the maximum intensity of the Green channel for the VOI return average intensity of image defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getMaxIntensityGreen() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.maxIntensity +
        "Green")).floatValue();
    } // {return maxIntenGreen;}

    /**
     * Gets the maximum intensity of the Red channel for the VOI return average intensity of image defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getMaxIntensityRed() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.maxIntensity +
        "Red")).floatValue();
    } // {return maxIntenRed;}

    /**
     * Gets the median
     *
     * @return  DOCUMENT ME!
     */
    public float getMedian() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.median)).floatValue();
    }

    /**
     * Gets the median of the Blue channel of image
     * defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getMedianB() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.median +
        "Blue")).floatValue();
    }

    /**
     * Gets the median of the Green channel of image
     * defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getMedianG() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.median +
        "Green")).floatValue();
    }

    /**
     * Gets the median of the Red channel of image defined
     * by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getMedianR() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.median +
        "Red")).floatValue();
    }

    /**
     * Gets the greatest distance between any two point of the VOI return distance.
     *
     * @return  DOCUMENT ME!
    public double getMaxWidth() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.maxWidthDescription)).floatValue();
    } // {return maxDistance;}

     */
    /**
     * Gets the minimum intensity of the VOI return average intensity of image defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getMinIntensity() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.minIntensity)).floatValue();
    } // {return minIntensity;}

    /**
     * Gets the minimum intensity of the Blue channel for the VOI return average intensity of image defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getMinIntensityBlue() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.minIntensity +
        "Blue")).floatValue();
    } // {return minIntenBlue;}

    /**
     * Gets the minimum intensity of the Green channel for the VOI return average intensity of image defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getMinIntensityGreen() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.minIntensity +
        "Green")).floatValue();
    } // {return minIntenGreen;}

    /**
     * Gets the minimum intensity of the Red channel for the VOI return average intensity of image defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getMinIntensityRed() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.minIntensity +
        "Red")).floatValue();
    } // {return minIntenRed;}

    /**
     * Gets the minor axis of VOI (only valid for 2D object); return minor axis length of the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getMinorAxis() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.minorAxisDescription)).floatValue();
    } // {return minorAxis;}

    /**
     * Gets the mode
     *
     * @return  DOCUMENT ME!
     */
    public float getMode() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.mode)).floatValue();
    }

    /**
     * Gets the mode of the Blue channel of image
     * defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getModeB() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.mode +
        "Blue")).floatValue();
    }

    /**
     * Gets the mode
     *
     * @return  DOCUMENT ME!
     */
    public int getModeCount() {
        return Integer.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.modeCount)).intValue();
    }

    /**
     * Gets the mode of the Blue channel of image
     * defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public int getModeCountB() {
        return Integer.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.modeCount +
        "Blue")).intValue();
    }

    /**
     * Gets the mode of the Green channel of image
     * defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public int getModeCountG() {
        return Integer.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.modeCount +
        "Green")).intValue();
    }

    /**
     * Gets the mode of the Red channel of image defined
     * by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public int getModeCountR() {
        return Integer.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.modeCount +
        "Red")).intValue();
    }


    /**
     * Gets the mode of the Green channel of image
     * defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getModeG() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.mode +
        "Green")).floatValue();
    }

    /**
     * Gets the mode of the Red channel of image defined
     * by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getModeR() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.mode +
        "Red")).floatValue();
    }

    /**
     * Gets the the number of pixels return number of pixels defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public int getNVoxels() {
        return Integer.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.quantityDescription)).intValue();
    } // {return nVox;}

    /**
     * Gets the perimeter of the VOI (in terms of res).
     *
     * @return  String perimeter string
     */
    public String getPerimeter() {
        return propertyList.firstElement().getProperty(VOIStatisticList.perimeterDescription);
    } // {return perimeter;}
    
    /**
     * Gets the circularity of the VOI.
     *
     * @return  String circularity string
     */
    public String getCircularity() {
        return propertyList.firstElement().getProperty(VOIStatisticList.circularityDescription);
    } // {return circularity;}
    
    /**
     * Gets the solidity of the VOI.
     *
     * @return  String solidity string
     */
    public String getSolidity() {
        return propertyList.firstElement().getProperty(VOIStatisticList.solidityDescription);
    } // {return solidity;}
    
    public String getNumberOfIndentationsCurvture() {
        return propertyList.firstElement().getProperty(VOIStatisticList.numberOfIndentationsCurvatureDescription);  
    }
    
    public String getNumberOfIndentationsHull() {
        return propertyList.firstElement().getProperty(VOIStatisticList.numberOfIndentationsHullDescription);
    }
    
    /**
     * 
     * @return
     */
    public String getMeanCurvature() {
        return propertyList.firstElement().getProperty(VOIStatisticList.meanCurvatureDescription);    
    }
    
    /**
     * 
     * @return
     */
    public String getStdDevCurvature() {
        return propertyList.firstElement().getProperty(VOIStatisticList.stdDevCurvatureDescription);    
    }
    
    /**
     * 
     * @return
     */
    public String getMeanNegativeCurvature() {
        return propertyList.firstElement().getProperty(VOIStatisticList.meanNegativeCurvatureDescription);    
    }
    
    public String getAsymmetryIndex() {
        return propertyList.firstElement().getProperty(VOIStatisticList.asymmetryIndexDescription);    
    }

    /**
     * Gets the principle axis of VOI (only valid for 2D object); return pricipal axis angle of the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getPrincipalAxis() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.axisDescription)).floatValue();
    } // {return principalAxis;}
    
    public double getFractalDimensionBoxCount() {
        return Double.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.fractalDimensionBoxCountDescription)).doubleValue();
    } // {return fractalDimensionBoxCount;}
    
    public double getFractalDimensionEuclideanDistance() {
        return Double.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.fractalDimensionEuclideanDistanceDescription)).doubleValue();
    } // {return fractalDimensionEuclideanDistance;}

    /**
     * Reports if algorithm is performing calcs per slice, per contour, or for entire VOI.
     *
     * @return  processType (int for process type)
     */
    public int getProcessType() {
        return processType;
    }

    /**
     * Gets position data to display in message bar - for DICOM and MINC images, gives patient position as well. The
     * image's associated transformation must be FileInfoBase.TRANSFORM_SCANNER_ANATOMICAL, or the orientations must be
     * set up correctly, or else the function returns null.
     * 
     * @param image The image the point lies within.
     * @param position (x,y,z(slice)) position in FileCoordinates
     * 
     * @return An array of strings that represent patient position.
     */
    public String[] getScannerPositionLabels(Vector3f position) {
        DecimalFormat nf = new DecimalFormat("#####0.0##");
        Vector3f kOut = new Vector3f();
        if (srcImage.getNDims() < 3) {
            // return null;
        }

        MipavCoordinateSystems.fileToScanner(position, kOut, srcImage);

        float[] tCoord = new float[3];
        tCoord[0] = kOut.X;
        tCoord[1] = kOut.Y;
        tCoord[2] = kOut.Z;

        String[] labels = {"R-L: ", "A-P: ", "I-S: "};

        if ( !srcImage.getRadiologicalView()) {
            labels[0] = new String("L-R: ");
        }

        String[] strs = new String[3];

        if (srcImage.getRadiologicalView()) {

            if ( (tCoord[0] < 0)) {
                strs[0] = new String("\t" + labels[0].charAt(0) + ": " + String.valueOf(nf.format(tCoord[0])));
            } else {
                strs[0] = new String("\t" + labels[0].charAt(2) + ": " + String.valueOf(nf.format(tCoord[0])));
            }
        } else {

            if ( (tCoord[0] < 0)) {
                strs[0] = new String("\t" + labels[0].charAt(2) + ": " + String.valueOf(nf.format(tCoord[0])));
            } else {
                strs[0] = new String("\t" + labels[0].charAt(0) + ": " + String.valueOf(nf.format(tCoord[0])));
            }
        }

        for (int i = 1; i < 3; i++) {

            if ( (tCoord[i] < 0)) {
                strs[i] = new String("\t" + labels[i].charAt(0) + ": " + String.valueOf(nf.format(tCoord[i])));
            } else {
                strs[i] = new String("\t" + labels[i].charAt(2) + ": " + String.valueOf(nf.format(tCoord[i])));
            }
        }

        return strs;
    }

    /**
     * Gets the coefficient of skewness of the pixel values in the VOI
     * @return
     */
    public float getSkewness() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.skewnessDescription)).floatValue();
    }

    /**
     * Gets the coefficient of skewness of the blue pixel values in the VOI
     * @return
     */
    public float getSkewnessB() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.skewnessDescription + "Blue")).floatValue();
    }




    /**
     * Gets the coefficient of skewness of the green pixel values in the VOI
     * @return
     */
    public float getSkewnessG() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.skewnessDescription + "Green")).floatValue();
    }

    /**
     * Gets the coefficient of skewness of the red pixel values in the VOI
     * @return
     */
    public float getSkewnessR() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.skewnessDescription + "Red")).floatValue();
    }

    /**
     * Gets the standard deviation of image intensities return standard deviation of image intensities defined by the
     * VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getStdDev() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.deviationDescription)).floatValue();
    } // {return stdDev;}

    /**
     * Gets the get standard deviation of image intensities (blue channel) return standard deviation of image
     * intensities defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getStdDevB() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.deviationDescription +
        "Blue")).floatValue();
    } // {return stdDevB;}

    /**
     * Gets the standard deviation of image intensities (green channel) return standard deviation of image intensities
     * defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getStdDevG() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.deviationDescription +
        "Green")).floatValue();
    } // {return stdDevG;}

    /**
     * Gets the standard deviation of image intensities (red channel) return standard deviation of image intensities
     * defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getStdDevR() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.deviationDescription +
        "Red")).floatValue();
    } // {return stdDevR;}

    /**
     * Gets the sum of image intensities defined by the VOI
     * @return
     */
    public float getSumIntensities() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.sumIntensities)).floatValue();
    }

    /**
     * Gets the sum of blue channel mage intensities defined by the VOI
     * @return
     */
    public float getSumIntensitiesB() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.sumIntensities + "Blue")).floatValue();
    }

    /**
     * Gets the sum of green channel image intensities defined by the VOI
     * @return
     */
    public float getSumIntensitiesG() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.sumIntensities + "Green")).floatValue();
    }

    /**
     * Gets the sum of red channel image intensities defined by the VOI
     * @return
     */
    public float getSumIntensitiesR() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.sumIntensities + "Red")).floatValue();
    }

    /**
     * DOCUMENT ME!
     *
     * @param   aVOI  DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public VOIStatisticalProperties getVOIProperties(VOI aVOI) {
        return propertyList.elementAt(selectedVOIset.indexOf(aVOI));
    }

    /**
     * Gets the volume of the VOI; return volume defined by the VOI.
     *
     * @return  DOCUMENT ME!
     */
    public float getVolume() {
        return Float.valueOf(propertyList.firstElement().getProperty(VOIStatisticList.volumeDescription)).floatValue();
    } // {return volume;}

    /**
     * Accessor that indicates if the source image is a color image.
     *
     * @return  <code>true</code> if the image is a color image.
     */
    public boolean isColor() {
        return srcImage.isColorImage();
    }

    // the following is to preserve old functionality

    /**
     * Creates the list of labels to use in the checkboxes.
     *
     * @return  DOCUMENT ME!
     */
    public String[] makeStatisticListDescriptions() {
        return statisticDescription;
    }

    /**
     * Begins execution of the software.
     */
    public void runAlgorithm() {
        int threadsCreated = 0;
        try {
            // stats for 2D images are by defined to work only on the VOIs in the slice
            // find the VOI to calculate for (need not be active!!)
            // System.out.println("algoVOIprops n VOIs = " + selectedVOIset.size());
            for (int i = 0; i < selectedVOIset.size(); i++) {
            	if(selectedVOIset.size() == 1) {
            		fireProgressStateChanged(50);
            	}else {
            		fireProgressStateChanged((int)((i+1)/selectedVOIset.size()*100));
            	}
            	
                activeVOI = selectedVOIset.elementAt(i);
                if (!doOnlyActiveContours) {
                    activeVOI.setAllActive(false);
                    if (srcImage.getNDims() == 2) {
                        //Calc2D calcVOI = new Calc2D(activeVOI);
                        Calc34D calcVOI = new Calc34D(activeVOI);
                        Thread t = new Thread(calcGroup, calcVOI, activeVOI.getName());
                        t.start();
                        threadsCreated++;
                    } else if (srcImage.getNDims() > 2) {
                        Calc34D calcVOI = new Calc34D(activeVOI);
                        Thread t = new Thread(calcGroup, calcVOI, activeVOI.getName());
                        t.start();
                        threadsCreated++;
                    }
                } else {
                    //create active contour subset to pass in
                    VOI tempVOI = (VOI)activeVOI.clone();
                    for (int k = tempVOI.getCurves().size() - 1; k >= 0 ; k--) {
                        if (!tempVOI.getCurves().elementAt(k).isActive()) {
                            tempVOI.getCurves().remove(k);
                        }
                    }
                    tempVOI.setAllActive(false);

                    selectedVOIset.remove(i);
                    selectedVOIset.insertElementAt(tempVOI, i);
                    if (srcImage.getNDims() == 2) {
                        //Calc2D calcVOI = new Calc2D(tempVOI);
                        Calc34D calcVOI = new Calc34D(tempVOI);
                        Thread t = new Thread(calcGroup, calcVOI, tempVOI.getName());
                        t.start();
                        threadsCreated++;
                    } else if (srcImage.getNDims() > 2) {
                        Calc34D calcVOI = new Calc34D(tempVOI);
                        Thread t = new Thread(calcGroup, calcVOI, tempVOI.getName());
                        t.start();
                        threadsCreated++;
                    }
                }

            }
        } catch (NullPointerException npe) {

            // to handle the srcImage == null problem
            // if (noisyProcess) {
            if (srcImage == null) {
                displayError("Source Image is null");
            }

            MipavUtil.displayError("Null pointer refers to:\n" + npe.getMessage());
            npe.printStackTrace();
            // }
        }

        Thread[] activeGroup = new Thread[threadsCreated];
        //extra threads cannot be silently ignored, so maximum is set
        calcGroup.enumerate(activeGroup);
        for(int i=0; i<activeGroup.length; i++) {
            if(activeGroup[i] != null && activeGroup[i].isAlive()) {
                try {
                    Preferences.debug("Waiting for "+activeGroup[i].getName()+" to finish.\n", Preferences.DEBUG_ALGORITHM);
                    activeGroup[i].join();
                    Preferences.debug("Still waiting for "+activeGroup[i].getName()+" to finish.\n", 
                    		Preferences.DEBUG_ALGORITHM);
                } catch(InterruptedException e) {
                    System.err.println("Thread waiting process did not complete normally.");
                    System.err.println("Please restart calculation process.");
                }
            }
        }

        setCompleted(true);
    }

    /**
     * Sets whether the largest distance is calculated. Defaults to true,
     * set to false if VOI will not complete.
     * @param distanceFlag
     */
    public void setDistanceFlag(boolean distanceFlag) {
        this.distanceFlag = distanceFlag;
    }

    /**
     * Sets the flag for calculating totals ONLY for active contours
     * @param doActive
     */
    public void setDoOnlyActiveContours(boolean doActive) {
        this.doOnlyActiveContours = doActive;
    }

    /**
     * Sets the String float formatter to trim to numDecimal number of decimals.
     *
     * @param  numDecimal  int number of decimals
     * @param  doForce     boolean force numDecimal or allow zero
     */
    public void setPrecisionDisplay(int numDecimal, boolean doForce) {
        nf.setMaximumFractionDigits(numDecimal);

        if (doForce) {
            nf.setMinimumFractionDigits(numDecimal);
        } else {
            nf.setMinimumFractionDigits(0);
        }
    }

    /**
     * Sets the list of selected statistics to calculate. Default is to calculate all statistics.
     * @param checkList
     */
    public void setSelectedStatistics( boolean[] checkList )
    {
        statsList = checkList;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  aVOI  DOCUMENT ME!
     */
    public void setSelectedVOI(VOI aVOI) {
        activeVOI = aVOI;
    }

    /**
     * tells the algorithm to total the property calculations.
     *
     * @param  totals  DOCUMENT ME!
     */
    public void setShowTotals(boolean totals) {
        showTotals = totals;
    }

    /**
     * Sets whether the largest slice distance is calculated.  Defaults
     * to true, set to false if VOI will not complete.
     * @param sliceDistanceFlag
     */
    public void setSliceDistanceFlag(boolean sliceDistanceFlag) {
        this.sliceDistanceFlag = sliceDistanceFlag;
    }

    /**
     * DOCUMENT ME!
     *
     * @param  list  DOCUMENT ME!
     */
    public void setVOIList(ListModel list) {

        // convert model of a list to a vector of VOI elements.
        selectedVOIset = new ViewVOIVector(list.getSize());

        for (int i = 0; i < list.getSize(); i++) {
            selectedVOIset.addElement((VOI)list.getElementAt(i));
        }

        if (selectedVOIset.size() != 0) {
            initialiseDataHolders(selectedVOIset.size());
        }

    }

    /**
     * sets the selected VOIset and the data set data storage sizes based on the number of curves in the Vector.
     *
     * @param  vvv  DOCUMENT ME!
     */
    public void setVOIList(ViewVOIVector vvv) {
        selectedVOIset = vvv;

        if (vvv.size() != 0) {
            initialiseDataHolders(vvv.size());
        }
    }
    
    /**
     * gets the selected VOIset 
     *
     * @param  vvv  DOCUMENT ME!
     */
    public ViewVOIVector getVOIList() {
        return selectedVOIset;
    }


    /**
     * DOCUMENT ME!
     *
     * @param  leadBase  DOCUMENT ME!
     */
    protected String addScannerLabels(String baseString, Vector3f currentPt) {

        String[] positions = null;
        Vector3f scaledPt;

        if ((srcImage.getFileInfo(0).getOrigin()[0] != 0) || (srcImage.getFileInfo(0).getOrigin()[1] != 0) ||
                (srcImage.getFileInfo(0).getOrigin()[2] != 0)) {

            scaledPt = new Vector3f();

            float xRes = srcImage.getFileInfo(0).getResolutions().length > 0 ? srcImage.getFileInfo(0).getResolutions()[0] : 1;
            float yRes = srcImage.getFileInfo(0).getResolutions().length > 1 ? srcImage.getFileInfo(0).getResolutions()[1] : 1;
            float zRes = srcImage.getFileInfo(0).getResolutions().length > 2 ? srcImage.getFileInfo(0).getResolutions()[2] : 1;

            scaledPt.X = (currentPt.X/xRes);
            scaledPt.Y = (currentPt.Y/yRes);
            scaledPt.Z = (currentPt.Z/zRes);


            if (srcImage.getNDims() > 2) {
                positions = getScannerPositionLabels(scaledPt);
            }

            if (positions != null) {    
                baseString += positions[0] + " " + positions[1] + " " + positions[2];
            } 

        } 

        return baseString;

    }

    protected int indexOf( String statistic )
    {
        for ( int i = 0; i < numberOfStatistics; i++ )
        {
            if ( statistic.equals( statisticDescription[i] ) )
            {
                return i;
            }
        }
        return 0;
    }


    /**
     * DOCUMENT ME!
     *
     * @param  numberOfVOIs  DOCUMENT ME!
     */
    private void initialiseDataHolders(int numberOfVOIs) {
        propertyList = new Vector<VOIStatisticalProperties>(numberOfVOIs);

        for (int i = 0; i < numberOfVOIs; i++) {
            propertyList.add(new VOIStatisticalProperties());
        }
    }







}
