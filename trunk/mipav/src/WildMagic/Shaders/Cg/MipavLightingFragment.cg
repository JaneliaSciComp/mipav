//----------------------------------------------------------------------------
// Shared functions.
//----------------------------------------------------------------------------
void GetDirectionalLightFactors
(
 float3    kModelPosition,
 float3    kModelNormal,
 float3    kCameraPosition,
 float3    kLightDirection,
 float     fSpecularExponent,
 out float fDiffuseFactor,
 out float fSpecularFactor)
{
    float fDiff = 0;
    float fSpec = 0;
    
    float cos_theta = 0;
    float cos_alpha = 0;

    /*
    fDiff = -dot(kModelNormal,kLightDirection);
    if (fDiff > 0.0f)
    {
        float3 kViewVector = normalize(kCameraPosition - kModelPosition);
        float3 kHalfVector = normalize(kViewVector - kLightDirection);
        fSpec = dot(kModelNormal,kHalfVector);
        if (fSpec > 0.0f)
        {
            fSpec = pow(1.03f*fSpec,32f);
        }
        else
        {
            fSpec = 0.0f;
        }
    }
    else
    {
        fDiff = 0.0f;
        fSpec = 0.0f;
    }
    */
    
    float3 V = normalize(kCameraPosition - kModelPosition);
    float3 N = normalize(kModelNormal);
    
    float3 L = float3(kLightDirection.x, kLightDirection.y, kLightDirection.z);
    L = -L;
    L = normalize(L);
    
    float3 R = float3(N.x, N.y, N.z);
    R = R * ( 2 * dot(L, N));
    R = R - L;
    R = normalize(R);
    
    cos_theta = dot(L, N);
    cos_alpha = dot(R, V);
    
    if ( cos_theta > 0 ) {
       fDiff = 1.0f * cos_theta;
    }
    if ( cos_alpha > 0 ) {
       fSpec = pow(cos_alpha, 5f);
    }
    
    fDiffuseFactor = fDiff;
    fSpecularFactor = fSpec;
}
//----------------------------------------------------------------------------
void GetPointLightFactors
(
 float3    kModelPosition,
 float3    kModelNormal,
 float3    kCameraPosition,
 float3    kLightPosition,
 float     fSpecularExponent,
 out float fDiffuseFactor,
 out float fSpecularFactor)
{
    float fDiff = 0;
    float fSpec = 0;
    float cos_theta = 0;
    float cos_alpha = 0;
    
    
    float3 kVertexDirection = normalize(kModelPosition - kLightPosition);
    fDiff = -dot(kModelNormal,kVertexDirection);
    if (fDiff > 0.0f)
    {
        float3 kViewVector = normalize(kCameraPosition - kModelPosition);
        float3 kHalfVector = normalize(kViewVector - kVertexDirection);
        fSpec = dot(kModelNormal,kHalfVector);
        if (fSpec > 0.0f)
        {
            fSpec = pow(fSpec,32f);
        }
        else
        {
            fSpec = 0.0f;
        }
    }
    else
    {
        fDiff = 0.0f;
        fSpec = 0.0f;
    }
    /*
   float3 V = normalize(kCameraPosition - kModelPosition);
    float3 N = normalize(kModelNormal);
    
    float3 lightDirection = normalize(kLightPosition - kModelPosition);
    float3 L = float3(lightDirection.x, lightDirection.y, lightDirection.z);
    L = -L;
    L = normalize(L);
    
    float3 R = float3(N.x, N.y, N.z);
    R = R * ( 2 * dot(L, N));
    R = R - L;
    R = normalize(R);
    
    cos_theta = dot(L, N);
    cos_alpha = dot(R, V);
    
    if ( cos_theta > 0 ) {
       fDiff = 1.0f * cos_theta;
    }
    if ( cos_alpha > 0 ) {
       fSpec = pow(cos_alpha, 32f);
    }
    */
    fDiffuseFactor = fDiff;
    fSpecularFactor = fSpec;
}
//----------------------------------------------------------------------------
void GetSpotLightFactors
(
 float3    kModelPosition,
 float3    kModelNormal,
 float3    kCameraPosition,
 float3    kLightPosition,
 float     fSpecularExponent,
 float3    kSpotAxis,
 float     fSpotCosAngle,
 float     fSpotExponent,
 out float fDiffuseFactor,
 out float fSpecularFactor,
 out float fSpotFactor)
{
    float fDiff, fSpec, fSpot;

    float3 kVertexDirection = normalize(kModelPosition - kLightPosition);
    float fVertexCosAngle = dot(kSpotAxis,kVertexDirection);
    if (fVertexCosAngle >= fSpotCosAngle)
    {
        fDiff = -dot(kModelNormal,kVertexDirection);
        if (fDiff > 0.0f)
        {
            float3 kViewVector = normalize(kCameraPosition - kModelPosition);
            float3 kHalfVector = normalize(kViewVector - kVertexDirection);
            fSpec = dot(kModelNormal,kHalfVector);
            if (fSpec > 0.0f)
            {
                fSpec = pow(fSpec,fSpecularExponent);
            }
            else
            {
                fSpec = 0.0f;
            }
            fSpot = pow(fVertexCosAngle,fSpotExponent);
        }
        else
        {
            fDiff = 0.0f;
            fSpec = 0.0f;
            fSpot = 0.0f;
        }
    }
    else
    {
        fDiff = 0.0f;
        fSpec = 0.0f;
        fSpot = 0.0f;
    }

    fDiffuseFactor = fDiff;
    fSpecularFactor = fSpec;
    fSpotFactor = fSpot;
}

float GetAttenuation
(
 float3   kModelPos,
 float3   kLightPos, 
 float4   kAttenuation)
{
    // Attenuate the color (x=constant, y=linear, z=quadratic, w=intensity).
    // Attenuation is not active when the x component is zero.  The distance
    // must be computed in *world* coordinates.  The distance in camera
    // coordinates is not correct when the MVP matrix has nonunit scaling
    // factors.
    
    float3 kVertexWorldDir = kModelPos - kLightPos;
    //float3 kVertexModelDir = kModelPos - kLightPos;
    //float3 kVertexWorldDir = mul(kVertexModelDir,kWMatrix);
    float fDistance = sqrt(
                           kVertexWorldDir.x*kVertexWorldDir.x +
                           kVertexWorldDir.y*kVertexWorldDir.y +
                           kVertexWorldDir.z*kVertexWorldDir.z);

    float fAttn = kAttenuation.w/(kAttenuation.x + fDistance*(kAttenuation.y
                                                              + fDistance*kAttenuation.z));
    
    return fAttn;
}

void AmbientLight( uniform float3   MaterialEmissive,
                   uniform float3   MaterialAmbient,
                   uniform float3   LightAmbient,
                   uniform float4   LightAttenuation,
                   out     float4 kVertexColor)

{
    float3 kLAmb = LightAttenuation.w*LightAmbient;
    kVertexColor.rgb = MaterialEmissive + MaterialAmbient*kLAmb;
    kVertexColor.a = 1.0;
}

void DirectionalLight( uniform float3 kModelPosition,
                       uniform float3 kModelNormal,
                       uniform float3   CameraWorldPosition,
                       uniform float3   MaterialEmissive,
                       uniform float3   MaterialAmbient,
                       uniform float4   MaterialDiffuse,
                       uniform float4   MaterialSpecular,
                       uniform float3   LightDirection,
                       uniform float3   LightAmbient,
                       uniform float3   LightDiffuse,
                       uniform float3   LightSpecular,
                       uniform float4   LightAttenuation,
                       out     float4 kVertexColor)
    
{
    float fDiff, fSpec;
    GetDirectionalLightFactors(kModelPosition,kModelNormal,
                               CameraWorldPosition,LightDirection,MaterialSpecular.a,
                               fDiff,fSpec);
    float3 kColor = MaterialAmbient*LightAmbient;
    if (fDiff > 0.0f)
    {
        kColor += fDiff*MaterialDiffuse.rgb*LightDiffuse;
        if (fSpec > 0.0f)
        {
            kColor += fSpec*MaterialSpecular.rgb*LightSpecular;
        }
    }

    kVertexColor.rgb = MaterialEmissive + LightAttenuation.w*kColor;
    kVertexColor.a = 1.0;
}

void PointLight(    uniform float3 kModelPosition,
                    uniform float3 kModelNormal,
                    uniform float3   CameraWorldPosition,
                    uniform float3   MaterialEmissive,
                    uniform float3   MaterialAmbient,
                    uniform float4   MaterialDiffuse,
                    uniform float4   MaterialSpecular,
                    uniform float3   LightWorldPosition,
                    uniform float3   LightAmbient,
                    uniform float3   LightDiffuse,
                    uniform float3   LightSpecular,
                    uniform float4   LightAttenuation,
                    out     float4 kVertexColor)
{
    float fDiff, fSpec;
    GetPointLightFactors(kModelPosition.xyz,kModelNormal,
                         CameraWorldPosition,LightWorldPosition,MaterialSpecular.a,
                         fDiff,fSpec);

    float fAttn = GetAttenuation(kModelPosition.xyz,
                                 LightWorldPosition,LightAttenuation);

    float3 kColor = MaterialAmbient*LightAmbient;
    if (fDiff > 0.0f)
    {
        kColor += fDiff*MaterialDiffuse.xyz*LightDiffuse;
        if (fSpec > 0.0f)
        {
            kColor += fSpec*MaterialSpecular.xyz*LightSpecular;
        }
    }

    kVertexColor.rgb = MaterialEmissive + fAttn*kColor;
    kVertexColor.a = MaterialDiffuse.a;
}

void SpotLight(    uniform float3 kModelPosition,
                   uniform float3 kModelNormal,
                   uniform float3 CameraWorldPosition,
                   uniform float3 MaterialEmissive,
                   uniform float3 MaterialAmbient,
                   uniform float4 MaterialDiffuse,
                   uniform float4 MaterialSpecular,
                   uniform float3 LightWorldPosition,
                   uniform float3 LightWorldDirection,
                   uniform float3 LightAmbient,
                   uniform float3 LightDiffuse,
                   uniform float3 LightSpecular,
                   uniform float4 LightSpotCutoff,
                   uniform float4 LightAttenuation,
                   out     float4 kVertexColor)
{
    float fDiff, fSpec, fSpot;
    GetSpotLightFactors(kModelPosition.xyz,kModelNormal,
                        CameraWorldPosition,LightWorldPosition,MaterialSpecular.a,
                        LightWorldDirection,LightSpotCutoff.y,LightSpotCutoff.w,fDiff,
                        fSpec,fSpot);

    float fAttn = GetAttenuation(kModelPosition.xyz,
                                 LightWorldPosition,LightAttenuation);

    float3 kColor = MaterialAmbient*LightAmbient;
    if (fSpot > 0.0f)
    {
        if (fDiff > 0.0f)
        {
            kColor += (fSpot*fDiff)*MaterialDiffuse.rgb*LightDiffuse;
            if (fSpec > 0.0f)
            {
                kColor += (fSpot*fSpec)*MaterialSpecular.rgb*LightSpecular;
            }
        }
    }
    
    kVertexColor.rgb = MaterialEmissive + fAttn*kColor;
    kVertexColor.a = MaterialDiffuse.a;
}


/**
 * Compute the surface color based on lighting.
 */
void computeColor( float3 kModelPosition, float3 kModelNormal, float3 CameraWorldPosition, 
                   float3 MaterialEmissive, float3 MaterialAmbient, float4 MaterialDiffuse, float4 MaterialSpecular,
                   float4 LightAmbient, float4 LightDiffuse, float4 LightSpecular,
                   float4 LightWorldPosition, float4 LightWorldDirection,
                   float4 LightSpotCutoff, float4 LightAttenuation,
                   float LightType,
                   out float4 color_sample)
{
    if ( LightType == -1 )
    {
//         float3 local_normal = normalize(kModelNormal);

//         color_sample.r = local_normal.x;
//         color_sample.g = local_normal.y;
//         color_sample.b = local_normal.z;
        color_sample.r = 0;
        color_sample.g = 0;
        color_sample.b = 0;
    }
    else
    {
        float3 local_normal = normalize(kModelNormal);

        if ( LightType == 0 )
        {
            AmbientLight( MaterialEmissive,
                          MaterialAmbient,
                          LightAmbient,
                          LightAttenuation,
                          color_sample );
        }
        else if ( LightType == 1 )
        {
            DirectionalLight(  kModelPosition,
                               local_normal,
                               CameraWorldPosition,
                               MaterialEmissive,
                               MaterialAmbient,
                               MaterialDiffuse,
                               MaterialSpecular,
                               LightWorldDirection,
                               LightAmbient,
                               LightDiffuse,
                               LightSpecular,
                               LightAttenuation,
                               color_sample);

        }
        else if ( LightType == 2 )
        {
            PointLight( kModelPosition,
                        local_normal,
                        CameraWorldPosition,
                        MaterialEmissive,
                        MaterialAmbient,
                        MaterialDiffuse,
                        MaterialSpecular,
                        LightWorldPosition,
                        LightAmbient,
                        LightDiffuse,
                        LightSpecular,
                        LightAttenuation,
                        color_sample);
        }
        else
        {
            SpotLight( kModelPosition,
                       local_normal,
                       CameraWorldPosition,
                       MaterialEmissive,
                       MaterialAmbient,
                       MaterialDiffuse,
                       MaterialSpecular,
                       LightWorldPosition,
                       LightWorldDirection,
                       LightAmbient,
                       LightDiffuse,
                       LightSpecular,
                       LightSpotCutoff,
                       LightAttenuation,
                       color_sample);
        }
    }
}

/**
 * Clip the volume based on the x,y,z axes.
 * returns 1 when the volume is clipped, 0 when not clipped.
 */
bool myClip ( float3 myVec,
              float clipX,
              float clipXInv,
              float clipY,
              float clipYInv,
              float clipZ,
              float clipZInv )
{
    if ( myVec.x > clipX )
    {
        return true;
    }
    if ( myVec.x < clipXInv )
    {
        return true;
    }
    if ( myVec.y > clipY )
    {
        return true;
    }
    if ( myVec.y < clipYInv )
    {
        return true;
    }
    if ( myVec.z > clipZ )
    {
        return true;
    }
    if ( myVec.z < clipZInv )
    {
        return true;
    }
    return false;
}

void v_MipavLightingFragment(
                     in float4        kModelPosition  : POSITION,
                     in float4        kModelNormal : NORMAL,
                     in float4        kModelColor0 : COLOR0,
                     in float3        kInBaseTCoord : TEXCOORD0,

                     out float4       kClipPosition : POSITION,
                     out float3       kInPos,
                     out float3       kInVolumeClipPos,
                     out float3       kInNormal,
                     out float4       kInColor0,
                     out float3       kOutBaseTCoord : TEXCOORD0,
                     uniform float4x4 WVPMatrix)
{
    // Transform the position from model space to clip space.
    kClipPosition = mul(kModelPosition,WVPMatrix);
    kInPos = mul(kModelPosition,WVPMatrix);
    kInNormal = kModelNormal;
    kInVolumeClipPos = kInBaseTCoord;
    kInColor0 = kModelColor0;

    // Pass through the texture coordinate.
    kOutBaseTCoord = kInBaseTCoord;
}

void p_MipavLightingFragment(
                     out float4       kVertexColor : COLOR,
                     in float3         kBaseTCoord : TEXCOORD0,
                     in float3        kInPos,
                     in float3        kInVolumeClipPos,
                     in float3        kInNormal,
                     in float4       kInColor0,
                     uniform sampler3D VolumeImageA : TEXUNIT1, 
                     uniform sampler1D ColorMapA : TEXUNIT2,
                     uniform sampler3D VolumeImageNew : TEXUNIT3, 
                     uniform sampler1D ColorMapNew : TEXUNIT4,
                     uniform float UseTexture,
                     uniform float UseImageNew,
                     uniform float UseLUTNew,
                     uniform float Blend,
                     uniform float ClipEnabled,
                     uniform float DoClip,
                     uniform float clipX,
                     uniform float clipXInv,
                     uniform float clipY,
                     uniform float clipYInv,
                     uniform float clipZ,
                     uniform float clipZInv,
                     uniform float4 clipArb,
                     uniform float4 clipEye,
                     uniform float4 clipEyeInv,

                     uniform float3 MaterialEmissive,
                     uniform float3 MaterialAmbient,
                     uniform float4 MaterialDiffuse,
                     uniform float4 MaterialSpecular,
                     
                     uniform float  Light0Type,
                     uniform float4 Light0Ambient,
                     uniform float4 Light0Diffuse,
                     uniform float4 Light0Specular,
                     uniform float4 Light0SpotCutoff,
                     uniform float4 Light0Attenuation,
                     uniform float4 Light0ModelPosition,
                     uniform float4 Light0ModelDirection,
                     
                     uniform float4 Light1Ambient,
                     uniform float4 Light1Attenuation,
                     
                     uniform float  Light2Type,
                     uniform float4 Light2Ambient,
                     uniform float4 Light2Diffuse,
                     uniform float4 Light2Specular,
                     uniform float4 Light2SpotCutoff,
                     uniform float4 Light2Attenuation,
                     uniform float4 Light2WorldPosition,
                     uniform float4 Light2WorldDirection,
                     
                     uniform float  Light3Type,
                     uniform float4 Light3Ambient,
                     uniform float4 Light3Diffuse,
                     uniform float4 Light3Specular,
                     uniform float4 Light3SpotCutoff,
                     uniform float4 Light3Attenuation,
                     uniform float4 Light3WorldPosition,
                     uniform float4 Light3WorldDirection,
                     
                     uniform float3 CameraModelPosition,
                     uniform float3 CameraWorldPosition,
                     uniform float4x4 WMatrix,
                     uniform float4x4 WVPMatrix)

{
    bool bClipped = false;

    if ( ClipEnabled == 1.0 )
    {
        // axis-aligned clipping:
        if ( (DoClip != 0) && myClip( kInVolumeClipPos, clipX, clipXInv, clipY, clipYInv, clipZ, clipZInv ) )
        {
            bClipped = true;
        }
        else
        {
            bClipped = false;
            if ( DoClip != 0 )
            {
                // eye clipping and arbitrary clipping:
                float4 aPosition = float4(0,0,0,0);
                aPosition.xyz = kInVolumeClipPos.xyz - (.5,.5,.5);
                aPosition = mul( aPosition, WVPMatrix );
                aPosition.xyz = aPosition.xyz + (.5,.5,.5);
                float fDot = dot( aPosition.xyz, clipEye.xyz );
                float fDotInv = dot( aPosition.xyz, clipEyeInv.xyz );
                float fDotArb = dot( kInVolumeClipPos.xyz, clipArb.xyz );
                if ( (fDot < clipEye.w) || (fDotInv > clipEyeInv.w) || (fDotArb > clipArb.w) )
                {
                    bClipped = true;
                }
            }
        }
        if ( bClipped == true )
        {
            discard;
        }
    }
    if ( bClipped == false )
    {
        if ( UseTexture == 0 )
        {
            MaterialDiffuse = kInColor0;
        }
        else
        {
            float4 color;
            if ( UseImageNew == 0 )
            {
                color = tex3D(VolumeImageA,kBaseTCoord);
            }
            else
            {
                color = tex3D(VolumeImageNew,kBaseTCoord);
            }
            if ( UseLUTNew == 0 )
            {
                MaterialDiffuse.rgb = tex1D(ColorMapA,color.r).rgb;
            }
            else
            {
                MaterialDiffuse.rgb = tex1D(ColorMapNew,color.r).rgb;
            }
            MaterialDiffuse.a = kInColor0.a;
        }

        // First light is static light:
        float4 color0 = (0,0,0,0);
        float4 color1 = (0,0,0,0);
        float4 color2 = (0,0,0,0);
        float4 color3 = (0,0,0,0);
        computeColor( kInPos, kInNormal, CameraModelPosition,
                      MaterialEmissive,  MaterialAmbient, MaterialDiffuse, MaterialSpecular,
                      Light0Ambient, Light0Diffuse, Light0Specular,
                      Light0ModelPosition, Light0ModelDirection,
                      Light0SpotCutoff, Light0Attenuation,
                      Light0Type, color0 );
        
        // Assume second light is alwasy an ambient light:
        AmbientLight( MaterialEmissive,  MaterialAmbient, 
                      Light1Ambient,
                      Light1Attenuation,
                      color1 );
        
        // Remaining lights:
        computeColor( kInPos, kInNormal, CameraModelPosition,
                      MaterialEmissive,  MaterialAmbient, MaterialDiffuse, MaterialSpecular,
                      Light2Ambient, Light2Diffuse, Light2Specular,
                      Light2WorldPosition, Light2WorldDirection,
                      Light2SpotCutoff, Light2Attenuation,
                      Light2Type, color2 );
        
        computeColor( kInPos, kInNormal, CameraModelPosition,
                      MaterialEmissive,  MaterialAmbient, MaterialDiffuse, MaterialSpecular,
                      Light3Ambient, Light3Diffuse, Light3Specular,
                      Light3WorldPosition, Light3WorldDirection,
                      Light3SpotCutoff, Light3Attenuation,
                      Light3Type, color3 );
        
        kVertexColor = color0 + color1 + color2 + color3;
        kVertexColor.a = Blend * kInColor0.a;

//        kVertexColor -= (color0 + color1 + color2 + color3);
//        kVertexColor.r += (kInNormal.x + 1.0)/2.0;
//        kVertexColor.g += (kInNormal.y + 1.0)/2.0;
//        kVertexColor.b += (kInNormal.z + 1.0)/2.0;

        if ( kVertexColor.a == 0 )
        {
            discard;
        }
    }
}
