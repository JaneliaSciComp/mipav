import gov.nih.mipav.model.algorithms.t2mapping.cj.mri.relax.t2fit.*;
import java.lang.*;
import java.io.*;

class TestNNLS
{
	double[] te = null;
	double[] data = null;
	double[] stds = null;
	double[] t2s = null;
	double[] x = null;
	double[] xjava = null;
	double chi2;
	double chi2java;
	T2FitNNLSsmall nnls = null;
	T2FitL1 l1 = null;

	static public void main(String[] args)
	{
		if( args.length < 1 )
		{
			System.out.println("TestNNLS <filename>");
			System.exit(-1);
		}

		TestNNLS tnnls = new TestNNLS(args[0]);
	}
	
	public TestNNLS(String filename)
	{
		/*
		 *  Read in the test file.
		 */
		readTestFile(filename);

		doNNLS();
//		doNNLSsmall();
//		doBiExpFitAmp(20.0, 80.0);
//		doL1();
//		doL1();
	}

	public void doBiExpFitAmp(final double small, final double large)
	{
		xjava = new double[x.length];

		T2FitBiExpFixedT2 nnls = new T2FitBiExpFixedT2(small, large);
		double[] output = nnls.solve(data);
		
		for(int ii=0; ii<output.length; ii++)
		{
			System.out.println(output[ii]);
		}
		System.out.println("");
	}

	public void doL1()
	{
		long start, intermediate, end;
		xjava = new double[x.length];

		start = System.currentTimeMillis();

		if( l1 == null ) 
		{
			l1 = new T2FitL1(te, t2s);
			l1.setStdDev(stds);
		}

		intermediate = System.currentTimeMillis();

		l1.solve(data,xjava);
		
		for(int ii=0; ii<xjava.length; ii++)
		{
			if( x[ii] > 0.0 || xjava[ii] > 0.0 ) 
			{
				System.out.println(x[ii] + " " + xjava[ii] + " @ " + 
				                   t2s[ii] + " ms");
			}
		}
		System.out.println("");

		end = System.currentTimeMillis();
		System.out.println("T2map: start-end " + (float)(end-start)/1000.0 + " seconds");
		System.out.println("T2map: end-intermediate " + (float)(end-intermediate)/1000.0 + " seconds");
	}

	public void doNNLSsmall()
	{
		xjava = new double[x.length];

		if( nnls == null )
		{
			nnls = new T2FitNNLSsmall(te, t2s);
		}
		nnls.setStdDev(stds);
		chi2java = nnls.solve(data, xjava);
		
		for(int ii=0; ii<xjava.length; ii++)
		{
			if( x[ii] > 0.0 || xjava[ii] > 0.0 )
			{
				System.out.println(x[ii] + "   " + xjava[ii] + " @ " + t2s[ii] + " ms");
			}
		}
		System.out.println("");
		System.out.println(chi2 + " " + chi2java);
	}

	public void doNNLS()
	{
		xjava = new double[x.length];

		T2FitNNLS nnls = new T2FitNNLS(te, t2s);
		nnls.setStdDev(stds);
		chi2java = nnls.solve(data, xjava);
		
		for(int ii=0; ii<xjava.length; ii++)
		{
			if( x[ii] > 0.0 || xjava[ii] > 0.0 )
			{
				System.out.println(x[ii] + "   " + xjava[ii] + " @ " + t2s[ii] + " ms");
			}
		}
		System.out.println("");
		System.out.println(chi2 + " " + chi2java);
	}

	public void readTestFile(String filename)
	{
		String line = null;
		BufferedReader in = null;

		/*
		 *  Read in the file.
		 */
		try
		{
			in = new BufferedReader(new FileReader(filename));
		}
		catch( IOException ioe )
		{
			System.out.println("Could not open " + filename);
		}

		/*
		 *  Read in the echo times, data and errors.
		 */
		try
		{
			line = in.readLine();	
		}
		catch( IOException ioe )
		{
			System.out.println("Could not read the line");
		}

		int nte = 0;
		try {
			nte = Integer.parseInt(line);
		}
		catch( NumberFormatException nfe )
		{
			System.out.println("'" + line + "' is not a number");
			System.exit(0);
		}

		te = new double[nte];
		data = new double[nte];
		stds = new double[nte];

		for(int ii=0; ii<nte; ii++) 
		{
			try
			{
				line = in.readLine();	
			}
			catch( IOException ioe )
			{
				System.out.println("Could not read the line");
			}
		
			double[] returns = parseDoubles(line, 3);

			te[ii] = returns[0];
			data[ii] = returns[1];
			stds[ii] = returns[2];

		}

		/*
		 *  Read in the coefficients and T2s.
		 */
		try
		{
			line = in.readLine();	
		}
		catch( IOException ioe )
		{
			System.out.println("Could not read the line");
		}

		int nt2 = 0;
		try {
			nt2 = Integer.parseInt(line);
		}
		catch( NumberFormatException nfe )
		{
			System.out.println("'" + line + "' is not a number");
			System.exit(0);
		}

		x = new double[nt2];
		t2s = new double[nt2];

		for(int ii=0; ii<nt2; ii++) 
		{
			try
			{
				line = in.readLine();	
			}
			catch( IOException ioe )
			{
				System.out.println("Could not read the line");
			}
		
			double[] returns = parseDoubles(line, 2);

			x[ii] = returns[0];
			t2s[ii] = returns[1];

		}

		/*
		 *  Read in the chi2.
		 */
		try
		{
			line = in.readLine();	
		}
		catch( IOException ioe )
		{
			System.out.println("Could not read the line");
		}

		try {
			chi2 = Double.parseDouble(line);
		}
		catch( NumberFormatException nfe )
		{
			System.out.println("'" + line + "' is not a number");
			System.exit(0);
		}
	}

	private double[] parseDoubles(final String linein, final int ndoubles)
	{
		String line = linein.trim();
		int index = 0;
		double[] returns = new double[ndoubles];

		int ii=0;
		while( line.length() > 0 )
		{
			index = line.indexOf(' ');

			if( index == -1 )
			{
				index = line.length();
			}

			try {
				returns[ii] = Double.parseDouble( 
				         line.substring(0, index).trim() );
			}
			catch( NumberFormatException nfe )
			{
				System.out.println("'" + line.substring(0,index).trim() +
				       "' is not a number");
				System.exit(0);
			}

			line = line.substring(index, line.length()).trim();
			ii++;
		}

		return returns;
	}
}
