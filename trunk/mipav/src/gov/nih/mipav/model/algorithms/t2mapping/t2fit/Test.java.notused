import gov.nih.mipav.model.algorithms.t2mapping.cj.mri.relax.t2fit.T2FitMonoExp;
import gov.nih.mipav.model.algorithms.t2mapping.cj.mri.relax.t2fit.T2FitBiExp;
import gov.nih.mipav.model.algorithms.t2mapping.cj.mri.relax.t2fit.T2FitNNLS;
import gov.nih.mipav.model.algorithms.t2mapping.cj.mri.relax.t2fit.T2FitNNLSAlpha;
import java.util.Arrays;

public class Test{
	
	public static void main( String[] args)
	{
		double[] te = new double[32];
		double[] d_true = new double[32];
		double[] de = new double[32];
		double[] stds = new double[32];

		int ii = 0;

		for(ii=0; ii<32; ii++)
		{
			te[ii] = 10.0*(ii+1);
		}

		ii=0;

		stds[ii] = 9.2323; ii++;
		stds[ii] = 18.1135; ii++;
		stds[ii] = 12.9632; ii++;
		stds[ii] = 7.2786; ii++;
		stds[ii] = 16.5303; ii++;
		stds[ii] = 16.9239; ii++;
		stds[ii] = 11.8933; ii++;
		stds[ii] = 1.6117; ii++;
		stds[ii] = 16.3713; ii++;
		stds[ii] = 3.1097; ii++;
		stds[ii] = 10.7284; ii++;
		stds[ii] = 15.9041; ii++;
		stds[ii] = 9.9714; ii++;
		stds[ii] = 22.4630; ii++;
		stds[ii] = 2.5827; ii++;
		stds[ii] = 9.2891; ii++;
		stds[ii] = 24.1864; ii++;
		stds[ii] = 0.8377; ii++;
		stds[ii] = 10.1515; ii++;
		stds[ii] = 10.3459; ii++;
		stds[ii] = 5.8692; ii++;
		stds[ii] = 21.5632; ii++;
		stds[ii] = 9.2729; ii++;
		stds[ii] = 17.4647; ii++;
		stds[ii] = 7.8944; ii++;
		stds[ii] = 13.2456; ii++;
		stds[ii] = 12.5415; ii++;
		stds[ii] = 15.9446; ii++;
		stds[ii] = 14.4096; ii++;
		stds[ii] = 6.5364; ii++;
		stds[ii] = 11.6574; ii++;
		stds[ii] = 19.9698; ii++;

		//  The data is of 
		//  te = 10:10:320; d = 1000*( 0.2*exp(-te/20) + 0.8 * exp(-te/80));
		ii=0;
		d_true[ii] = 827.3037; ii++;
		d_true[ii] = 696.6165; ii++;
		d_true[ii] = 594.4575; ii++;
		d_true[ii] = 512.2916; ii++;
		d_true[ii] = 444.6261; ii++;
		d_true[ii] = 387.8507; ii++;
		d_true[ii] = 339.5291; ii++;
		d_true[ii] = 297.9667; ii++;
		d_true[ii] = 261.9438; ii++;
		d_true[ii] = 230.5514; ii++;
		d_true[ii] = 203.0890; ii++;
		d_true[ii] = 178.9999; ii++;
		d_true[ii] = 157.8300; ii++;
		d_true[ii] = 139.2015; ii++;
		d_true[ii] = 122.7946; ii++;
		d_true[ii] = 108.3353; ii++;
		d_true[ii] = 95.5871; ii++;
		d_true[ii] = 84.3441; ii++;
		d_true[ii] = 74.4266; ii++;
		d_true[ii] = 65.6771; ii++;
		d_true[ii] = 57.9573; ii++;
		d_true[ii] = 51.1456; ii++;
		d_true[ii] = 45.1349; ii++;
		d_true[ii] = 39.8309; ii++;
		d_true[ii] = 35.1503; ii++;
		d_true[ii] = 31.0198; ii++;
		d_true[ii] = 27.3748; ii++;
		d_true[ii] = 24.1581; ii++;
		d_true[ii] = 21.3194; ii++;
		d_true[ii] = 18.8143; ii++;
		d_true[ii] = 16.6035; ii++;
		d_true[ii] = 14.6525; ii++;

		ii = 0;
		de[ii] = 836.2794; ii++;
		de[ii] = 703.9740; ii++;
		de[ii] = 600.2419; ii++;
		de[ii] = 512.8323; ii++;
		de[ii] = 451.9340; ii++;
		de[ii] = 393.6632; ii++;
		de[ii] = 337.0125; ii++;
		de[ii] = 294.2102; ii++;
		de[ii] = 258.9955; ii++;
		de[ii] = 215.8002; ii++;
		de[ii] = 200.9999; ii++;
		de[ii] = 180.4331; ii++;
		de[ii] = 161.0217; ii++;
		de[ii] = 154.0936; ii++;
		de[ii] = 119.7513; ii++;
		de[ii] = 115.5100; ii++;
		de[ii] = 103.5791; ii++;
		de[ii] = 94.5400; ii++;
		de[ii] = 64.5070; ii++;
		de[ii] = 68.7300; ii++;
		de[ii] = 61.8264; ii++;
		de[ii] = 41.1509; ii++;
		de[ii] = 38.9011; ii++;
		de[ii] = 50.6702; ii++;
		de[ii] = 34.4662; ii++;
		de[ii] = 36.8197; ii++;
		de[ii] = 28.6276; ii++;
		de[ii] = 17.9958; ii++;
		de[ii] = 19.8597; ii++;
		de[ii] = 26.7337; ii++;
		de[ii] = 11.7128; ii++;
		de[ii] = 22.4646; ii++;
	

		T2FitMonoExp t2dme = new T2FitMonoExp();
		T2FitBiExp t2dbe = new T2FitBiExp();
		T2FitNNLS t2nnls = new T2FitNNLS(te);
		T2FitNNLSAlpha t2nnlsa = new T2FitNNLSAlpha(te);

		//-----------------------------------------------------------------
		//
		//  MonoExponential Solution
		//
		System.out.println("Mono-exponential solution...");
		t2dme.setTE( te );
		t2dme.solve(de);
		System.out.println("");

		//-----------------------------------------------------------------
		//
		//  BiExponential Solution
		//
		System.out.println("Bi-exponential solution...");
		t2dbe.setTE( te );
		t2dbe.solve(de);
		System.out.println("");

		//-----------------------------------------------------------------
		//
		//  NNLS Solution - Least Squares 
		//
		double[] frac_low_high = new double[2];
		frac_low_high[0] = 1.02;
		frac_low_high[1] = 1.025;
		double[] x = new double[81];
		System.out.println("NNLS ls norm solution ...");
		double[] ones = new double[32];
		t2nnls.setStandardT2( );
		t2nnls.setStdDev(stds);
//		t2nnls.setAlpha( 180 );
		t2nnls.setParameters(frac_low_high);
		double[] t2s = t2nnls.getT2();
		t2nnls.solve(de, x);
		for(ii=0; ii<81; ii++)
		{
			if( x[ii] > 0.0 )
			{
				System.out.println(x[ii] + " " + t2s[ii]);
			}
		}
		System.out.println("");

		//-----------------------------------------------------------------
		//
		//  NNLS Solution - Least Squares AND Calculate Best Alpha
		//
		System.out.println("NNLS ls norm solution with alpha ...");
		t2nnlsa.setStdDev(stds);
		t2nnlsa.setStandardT2( );
		frac_low_high[0] = 0;
		frac_low_high[1] = 0;
		t2nnlsa.setParameters(frac_low_high);
		t2nnlsa.solve(de, x);
		for(ii=0; ii<81; ii++)
		{
			if( x[ii] > 0.0 )
			{
				System.out.println(x[ii] + " " + t2s[ii]);
			}
		}
		System.out.println("Best alpha was " + t2nnlsa.getBestAlpha());
		System.out.println("");
		 
		//-----------------------------------------------------------------
		//
		//  NNLS Solution - Least Squares AND Calculate Best Alpha
		//
		System.out.println("NNLS ls norm solution with alpha ...");
		t2nnlsa.setStdDev(stds);
		t2nnlsa.setStandardT2( );
		frac_low_high[0] = 1.02;
		frac_low_high[1] = 1.025;
		t2nnlsa.setParameters(frac_low_high);
		t2nnlsa.solve(de, x);
		for(ii=0; ii<81; ii++)
		{
			if( x[ii] > 0.0 )
			{
				System.out.println(x[ii] + " " + t2s[ii]);
			}
		}
		System.out.println("Best alpha was " + t2nnlsa.getBestAlpha());
		System.out.println("");
		System.exit(0);
	}
}
