package gov.nih.mipav.model.file;


import java.util.Vector;


/**
 * This class stores information about a file type, including the type description (i.e., 'NRRD') and allowed extensions
 * (i.e., '.nrrd,.nhdr').
 * 
 * @author mccreedy
 */
public class FileTypeInfo {
    private String description = null;

    private Vector<String> extensionList = new Vector<String>(4);

    /**
     * The string delimiter which should be used for extension lists passed into or generated by this class.
     */
    public static final String EXT_DELIM = ",";

    /**
     * Create a new FileTypeInfo.
     * 
     * @param desc The description for this file type (i.e., 'NRRD').
     * @param exts A vector of file extension strings, each of which should start with a period (i.e., '.mnc'). The
     *            first extension is the default extension for this file type.
     */
    public FileTypeInfo(final String desc, final Vector<String> exts) {
        description = desc;
        extensionList.addAll(exts);
    }

    /**
     * Create a new FileTypeInfo.
     * 
     * @param desc The description for this file type (i.e., 'NIFTI').
     * @param exts A String containing file extensions for this file type, separated by EXT_DELIM, starting with a
     *            period (i.e., '.nii,.img'). The first extension is the default extension for this file type.
     */
    public FileTypeInfo(final String desc, final String extsString) {
        description = desc;

        String[] exts = extsString.split(FileTypeInfo.EXT_DELIM);
        for (String ext : exts) {
            extensionList.add(ext);
        }
    }
    
    /**
     * Create a new FileTypeInfo.
     * 
     * @param desc The description for this file type.
     * @param exts A String containing file extensions for this file type, separated by EXT_DELIM, starting with a
     *            period (i.e., '.nii,.img'). The first extension is the default extension for this file type.
     */
    public FileTypeInfo(final String desc, final String ext, final String... extMore) {
        description = desc;
        
        extensionList.add(ext);
        
        for(String str : extMore) {
        	extensionList.add(str);
        }
    }

    /**
     * Retrieve the description for this file type.
     * 
     * @return The file type description (i.e., 'AFNI').
     */
    public String getDescription() {
        return description;
    }

    /**
     * Retrieve the list of extensions supported by this file type.
     * 
     * @return The list of file extensions.
     */
    public Vector<String> getExtensionList() {
        return extensionList;
    }

    /**
     * Retrieve a string listing all of the extensions supported by this file type, separated by EXT_DELIM.
     * 
     * @return A string listing the file extensions supported (or the empty string if none supported).
     */
    public String getExtensionsString() {
        String exts = new String();

        for (int i = 0; i < extensionList.size(); i++) {
            exts += extensionList.elementAt(i);
            if (i < extensionList.size() - 1) {
                exts += FileTypeInfo.EXT_DELIM;
            }
        }

        return exts;
    }

    /**
     * Returns the primary extension which should be used for this file type (i.e., '.nii' for NIFTI).
     * 
     * @return The default extension to use for this file type (or the empty string if none supported).
     */
    public String getDefaultExtension() {
        return (extensionList.size() == 0 ? "" : extensionList.elementAt(0));
    }

    /**
     * Return the description and file extension list for this file type.
     * 
     * @return A string in the format 'DESCRIPTION (.EXT1,EXT2,...)'.
     */
    public String getExtendedDescription() {
        return description + " (" + getExtensionsString() + ")";
    }

    /**
     * Add an extension to the file type's list of supported suffixes.
     * 
     * @param ext The extension to add to this file type.
     */
    public void addExtension(String ext) {
        extensionList.add(ext);
    }
}
