package gov.nih.mipav.model.scripting.actions;


import gov.nih.mipav.model.scripting.*;
import gov.nih.mipav.model.scripting.parameters.*;
import gov.nih.mipav.model.provenance.*;
import gov.nih.mipav.model.structures.ModelImage;
import gov.nih.mipav.view.dialogs.AlgorithmParameters;


/**
 * A base class for script actions which perform their action using an input image.
 */
public abstract class ActionImageProcessorBase extends ActionBase {
    /**
     * The label to use for the input image parameter.
     */
    protected static final String INPUT_IMAGE_LABEL = AlgorithmParameters.getInputImageLabel(1);
    
    /**
     * The image whose processing should be recorded in the script.  The actual processing must be done elsewhere.
     */
    protected ModelImage recordingInputImage;
    
    /**
     * The image generated by processing the input image, if any.
     */
    protected ModelImage recordingResultImage;
    
    /**
     * Constructor for the dynamic instantiation and execution of the script action.
     */
    public ActionImageProcessorBase() {}
    
    /**
     * Constructor used to record the Clone script action line.
     * 
     * @param  input  The image which was cloned.
     */
    public ActionImageProcessorBase(ModelImage input) {
        recordingInputImage = input;
    }
    
    /**
     * Constructor used to record the Clone script action line.
     * 
     * @param  input   The image which was cloned.
     * @param  result  The result image generated.
     */
    public ActionImageProcessorBase(ModelImage input, ModelImage result) {
        recordingInputImage = input;
        recordingResultImage = result;
    }
    
    /**
     * {@inheritDoc}
     */
    public abstract void insertScriptLine();
    
    /**
     * {@inheritDoc}
     */
    public abstract void scriptRun(ParameterTable parameters);
    
    /**
     * Changes the image whose processing should be recorded in the script.
     * 
     * @param  inputImage  The image which was processed.
     */
    public void setInputImage(ModelImage inputImage) {
        recordingInputImage = inputImage;
        
        if (!isScript) {
        	ProvenanceRecorder.getReference().addInputImage(inputImage.getImageName());
        }
    }
    
    /**
     * Changes the image generated by the action we are recording.
     * 
     * @param  resultImage  The image which was generated.
     */
    public void setResultImage(ModelImage resultImage) {
        recordingResultImage = resultImage;
    }
    
    /**
     * Returns whether an image has been registered in the script recorder.  If it has not been used, it must be specified externally when this script is run later.
     * 
     * @param   image  The image to look for in the recorder's image table.
     * @param   isScript boolean telling whether this operation involves the script recorder (or provenance recorder)
     * @return  <code>True</code> if the image has been stored in the recorder's image table, <code>false</code> otherwise.
     */
    protected static final boolean isImageStoredInRecorder(ModelImage image, boolean isScript) {
    	if (isScript) {
    		return ScriptRecorder.getReference().getImageTable().isImageStored(image.getImageName());
    	} else {
    		return ProvenanceRecorder.getReference().getImageTable().isImageStored(image.getImageName());
    	}
    }
    
    /**
     * Creates a new image parameter for the action's input image, determining whether it needs to be externally-specified or will be generated from another script action.
     * 
     * @param   isScript boolean telling whether this operation involves the script recorder (or provenance recorder)
     * @return  A new image parameter pointing to this action's input image.
     * 
     * @throws  ParserException  If there is a problem encountered while creating the new parameter.
     */
    protected ParameterImage createInputImageParameter(boolean isScript) throws ParserException {
        boolean isExternalImage = !isImageStoredInRecorder(recordingInputImage, isScript);
        
        String var = storeImageInRecorder(recordingInputImage, isScript);
        if (!isScript) {
        	ProvenanceRecorder.getReference().addInputImage(var);
        }
        
        return ParameterFactory.newImage(INPUT_IMAGE_LABEL, var, isExternalImage);
    }
    
    /**
     * Store an image in the script recorder image variable table.  Used to store input/output images while recording a script.  Should not be used while running a script.
     *
     * @param   image  The image to store in the variable table.
     * @param   isScript boolean telling whether this operation involves the script recorder (or provenance recorder)
     * 
     * @return  The image placeholder variable assigned to the image by the variable table.
     */
    protected static final String storeImageInRecorder(ModelImage image, boolean isScript) {
        if (isScript) {    	
        	return ScriptRecorder.getReference().storeImage(image.getImageName());
        } else {
        	return ProvenanceRecorder.getReference().storeImage(image.getImageName());
        }
    }
    
    /**
     * Store an image in the script runner image variable table.  Used to store input/output images while running a script.  Should not be used while recording a script.
     *
     * @param   image  The image to store in the variable table.
     *
     * @return  The image placeholder variable assigned to the image by the variable table.
     */
    protected static final String storeImageInRunner(ModelImage image) {
        return ScriptRunner.getReference().storeImage(image.getImageName());
    }
}
