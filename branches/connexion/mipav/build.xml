<?xml version="1.0" encoding="UTF-8"?>

<!--
    ==========
        MIPAV group software build file
        http://mipav.cit.nih.gov
        contact: mipav@mipav.cit.nih.gov
    ==========
-->
<project basedir="." default="compile" name="mipav">
    <!-- The project information (name, description, version, etc.) -->
    <property file="project.properties"/>
    <property file=".project.properties"/>

    <!--
        Give user a chance to override without editing this build-file
        (and without typing -D each time it is compiled).
    -->
    <property file=".${project.name}.ant.properties"/>
    <property file="${user.home}/.${project.name}.ant.properties"/>

    <!--
        =========
            Set properties to control names & versions
        =========
    -->
    <property name="project.version" value="${project.version.major}.${project.version.minor}" />

    <!--
        =========
            Set properties to control source tree
        =========
    -->
    <!-- directory aliases -->
    <property name="dir.source" value="src"/>
    <property name="dir.dest" value="classes"/>
    <property name="dir.doc" value="javadoc"/>
    <property name="dir.lib" value="${dir.source}/lib"/>
    <property name="dir.libnative" value="${dir.source}/libnative"/>

    <!--
        =========
            Set paths for the build
        =========
    -->
    <!-- directory aliases -->
    <!--<property name="dir.jmf" value="${user.home}/java/JMF_2.1.1/lib"/>-->

    <!--
        =========
            Set properties to control BUILD OPTIONS in default target
            COMPILE
        =========
    -->
    <property name="debug" value="true" />
    <property name="deprecation" value="true" />
    <property name="optimize" value="false" />
    <property name="javac.target" value="1.6+" />
    <property name="verbose" value="no" />
    <property name="nowarn" value="no" />
    <property name="listfiles" value="no" />
    <property name="version.target" value="1.6" />
    <property name="version.source" value="1.6" />
    <property name="sysAssert" value="yes" />

    <!--
        =========
            Javadoc options
        =========
    -->
    <property name="doc.access" value="private"/>
    <property name="doc.link" value="http://docs.oracle.com/javase/6/docs/api/"/>
    <property name="doc.linksource" value="no"/>
    <property name="doc.breakiterator" value="yes"/>
    <property name="doc.failonerror" value="yes"/>

    <!--
        =========
	    Options to be set from the ant command line (usually).
	=========
    -->
    <!--
        default to no params, but let the user specify otherwise through the command:
        `ant -Dproject.run.args="-i path_to/image.xml" run`
    -->
    <property name="project.run.args" value=""/>

    <!--
        =========
            Formatter options
        =========
    -->
    <property name="formatter.taskclasspath" value="."/>
    <property name="formatter.convention" value="jalopy_formatter_config.xml"/>
    <property name="formatter.dest" value="src_formatted"/>
    <property name="formatter.loglocation" value="format_log/format_log.html"/>

    <!-- INITIALISER -->
    <target name="init" description="Do not invoke on its own.">
        <tstamp />
        <path id="build.classpath">
            <pathelement path="${dir.dest}"/>
            <!--<fileset dir="${dir.jmf}">
                <filename description="The JMF JAR files." name="*.jar"/>
            </fileset>-->
            <pathelement location="${dir.source}/InsightToolkit/lib/InsightToolkit/InsightToolkit.jar"/>
            <!-- include all jar files under the lib directory -->
            <fileset dir="${dir.lib}">
                <filename description="JARs of required libraries" name="**/*.jar"/>
            </fileset>
            <!-- include all jar files under the native lib directory -->
            <fileset dir="${dir.libnative}">
                <filename description="JARs of required native libraries" name="**/*.jar"/>
            </fileset>
        </path>
        <property name="build.cp" refid="build.classpath" />

        <echo>source: ${dir.source}</echo>
        <echo>destination: ${dir.dest}</echo>
    </target>

    <!-- Compile the project source using the options specified by the set properties. -->
    <target name="compile"
            description="Basic compilation using properties file to control."
            depends="init">

        <echo>project name: ${project.name}</echo>
        <echo>project description: ${project.description}</echo>
        <echo>project version: ${project.version}</echo>
        <echo>project main class: ${project.main}</echo>
        <echo></echo>

        <echo>os name: ${os.name}</echo>
        <echo>java.home: ${java.home}</echo>
        <echo>java.version: ${java.version}</echo>
        <echo></echo>

        <echo>source: ${dir.source}</echo>
        <echo>destination: ${dir.dest}</echo>
        <echo>classpath: ${build.cp}</echo>

        <!-- make sure that the compilation directory exists -->
        <mkdir dir="${dir.dest}"/>

        <javac  debug="${debug}"
                deprecation="${deprecation}"
                description="Builds ${project.name.upper}"
                verbose="${verbose}"
                listfiles="${listfiles}"
                nowarn="${nowarn}"
                fork="true"
                memoryInitialSize="220M"
                memoryMaximumSize="1000M"
                id="${project.name} build"
                source="${version.source}"
                target="${version.target}"
                destdir="${dir.dest}"
                srcdir="${dir.source}"
                compiler="modern">
            <classpath refid="build.classpath" />
        </javac>

        <echo message="End of compilation."/>
    </target>

    <!-- Compile the sources with verbose output and debugging. -->
    <target name="test"
            description="Builds a compilation to test; verbose output."
            depends="init" >
        <echo message="Compilation started."/>

        <antcall target="compile">
            <param name="debug" value="true"/>
            <param name="deprecation" value="true"/>
            <param name="verbose" value="yes"/>
            <param name="listfiles" value="yes"/>
            <param name="nowarn" value="on"/>
        </antcall>

        <echo message="End of compilation."/>
    </target>

    <!-- Compile the sources cleanly. -->
    <target name="final"
            description="Fresh compilation so it may be packaged."
            depends="clean, init" >
        <echo message="Compilation started."/>

        <antcall target="compile">
            <param name="debug" value="true"/>
            <param name="deprecation" value="true"/>
            <param name="verbose" value="no"/>
            <param name="listfiles" value="no"/>
            <param name="nowarn" value="off"/>
        </antcall>

        <echo message="End of compilation."/>
    </target>

    <!-- Rebuild all the sources. -->
    <target name="all"
            description="Build everything to create a clean test-version."
            depends="clean, compile">
    </target>

    <!-- Create a jar file of the compiled software. -->
    <target name="jar" depends="init,clean,compile,copyresources">
        <jar compress="true" destfile="${project.name}.jar">
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="${project.main}"/>
            </manifest>
            <fileset dir="${dir.dest}"/>
        </jar>
    </target>

    <!-- Copies resources from the source directory to the
         compilation directory. -->
    <target name="copyresources"
            description="Copy all resource files to the compilation directory."
            depends="init">
        <!-- copy the icons to the compilation directory -->
        <copy todir="${dir.dest}/gov/nih/mipav/view/icons">
            <fileset dir="${dir.source}/gov/nih/mipav/view/icons" >
	        <include name="*.gif" />
	        <include name="*.GIF" />
	        <include name="*.jpg" />
	        <include name="*.JPG" />
	        <include name="*.jpeg"/>
	        <include name="*.JPEG"/>
	        <include name="*.png" />
	        <include name="*.PNG" />
	        <include name="*.icns" />
            </fileset>
        </copy>

        <!-- xml schema files -->
        <copy todir="${dir.dest}">
            <fileset dir="${dir.source}/../xml" includes="*.xsd"/>
        </copy>

        <!-- wildmagic shader files -->
        <copy todir="${dir.dest}/WildMagic">
            <fileset dir="${dir.source}/WildMagic"/>
        </copy>

        <!-- gpu computation kernels -->
        <copy todir="${dir.dest}/kernels">
            <fileset dir="${dir.source}/kernels"/>
        </copy>

        <!-- /// TODO: placeholder installshield config file would be nice.. -->

        <!-- misc resource files -->
        <copy todir="${dir.dest}">
            <fileset file="${dir.source}/../splash.png"/>
            <fileset file="${dir.source}/about.txt"/>
            <fileset file="${dir.source}/dicom_dictionary.txt"/>
            <fileset file="${dir.source}/private_dictionary.txt"/>
            <fileset file="${dir.source}/tDist.csv"/>
            <fileset file="${dir.source}/DICOMhelp.txt"/>
            <fileset dir="${dir.source}/plugins" includes="*.properties"/>
        </copy>

        <!-- MIPAV license files/information -->
        <copy todir="${dir.dest}/license">
            <fileset dir="${dir.source}/license"/>
        </copy>
    </target>

    <target name="copyjars"
            description="Copy all of the project jars for running the project."
            depends="init">
        <!-- copy the help jar to the compilation directory
        <copy todir="${dir.dest}/help">
            <fileset file="${dir.source}/help/mipav_help.jar"/>
        </copy>-->

        <copy todir="${dir.dest}/lib">
            <fileset dir="${dir.lib}" excludes=".svn"/>
        </copy>
        <copy todir="${dir.dest}/libnative">
            <fileset dir="${dir.libnative}" excludes=".svn,.java"/>
        </copy>
    </target>

    <!-- Reports the properties that will be used by ant. -->
    <target name="state"
        description="testing elements."
        depends="init">

        <echo>project name: ${project.name}</echo>
        <echo>project description: ${project.description}</echo>
        <echo>project version: ${project.version}</echo>
        <echo>project main class: ${project.main}</echo>
        <echo></echo>
        <echo>source: ${dir.source}</echo>
        <echo>destination: ${dir.dest}</echo>
        <echo>${build.cp}</echo>
    </target>

    <!-- Compile and run the program. -->
    <target name="run"
            description="Try running it."
            depends="init,compile,copyresources,copyjars">
        <java classname="${project.main}"
                classpathref="build.classpath"
                dir="${dir.dest}"
                jvm="java"
                fork="true"
                failonerror="true"
                maxmemory="1500M">
            <jvmarg value="-Xms1500M"/>
            <jvmarg value="-Xmx1500M"/>
            <jvmarg value="-server"/>
            <classpath>
                <pathelement path="${dir.dest}"/>
                <!--<pathelement location="${dir.dest}/help/mipav_help.jar"/>-->
            </classpath>
            <arg line="${project.run.args}"/>
        </java>
    </target>

    <!-- Generate the project documentation. -->
    <target name="javadoc"
            description="Builds javadoc."
            depends="init">
        <echo>Making API output in: ${dir.doc}.</echo>
        <mkdir dir="${dir.doc}"/>
        <javadoc destdir="${dir.doc}"
                packagenames="gov.nih.*"
                maxmemory="1000M"
                access="${doc.access}"
                author="true"
                windowtitle="${project.name.upper} API Documentation"
                linksource="${doc.linksource}"
                link="${doc.link}"
                breakiterator="${doc.breakiterator}"
                source="${version.source}"
                classpathref="build.classpath">
            <sourcepath>
                <pathelement location="${dir.source}"/>
            </sourcepath>
        </javadoc>
    </target>

    <!-- Remove all files generated by the build process. -->
    <target name="clean"
            description="Clean all build products."
            depends="init">
        <delete dir="${dir.dest}"/>
        <delete file="${project.name}.jar"/>
        <delete dir="${dir.doc}"/>
    </target>

    <target name="format"
            description="Format source files using jalopy."
            depends="compile">
        
        <taskdef name="jalopy" classname="com.triemax.JalopyTask" classpath="${formatter.taskclasspath}"/>
        
        <jalopy convention="${formatter.convention}"
                classpathref="build.classpath"
                fork="true"
                loglevel="info"
                threads="1"
                log="${formatter.loglocation}"
                failonerror="true">
            <fileset dir="${dir.source}">
                <include name="**/*.java"/>
            </fileset>
        </jalopy>
    </target>
</project>

